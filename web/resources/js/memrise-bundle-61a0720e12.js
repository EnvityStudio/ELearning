!function e(t,n,i){function r(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(o)return o(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return r(n?n:e)},c,c.exports,e,t,n,i)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,t){t.exports=function(e,t){"use strict";function n(){return t.data&&t.data.is_login?"Signin Started":"Signup Started"}function i(){var e=localStorage.getItem("authentication_id");return e||(e=uuidV4(),localStorage.setItem("authentication_id",e)),e}e(document).ready(function(){if(e(".btn-flacebook").on("click",function(){analytics.track(n(),{provider:"facebook",authentication_id:i()})}),e(".btn-google").on("click",function(){analytics.track(n(),{provider:"google",authentication_id:i()})}),e("#login").on("submit",function(){analytics.track(n(),{provider:"email",authentication_id:i()})}),e("#join").on("submit",function(){analytics.track(n(),{provider:"email",authentication_id:i()})}),t.tracking&&t.tracking.authentication){var r=t.tracking.authentication.action;delete t.tracking.authentication.action,t.tracking.authentication.authentication_id=i(),localStorage.removeItem("authentication_id"),analytics.track(r,t.tracking.authentication)}})}},{}],2:[function(e,t){t.exports=function(t,n){"use strict";function i(e){var n=["Failed","Completed"],i=!1;return t.each(n,function(t,n){return e.indexOf(n)>-1?(i=!0,!1):void 0}),i}var r=e(20)(n),o="purchase";t(document).ready(function(){if(r.checkTracking(o)){var e=r.getTrackingAction(o);r.formatTracking(o,"order_id"),analytics.track(e,n.tracking[o]),i(e)&&r.removeTrackingId("order_id")}})}},{20:20}],3:[function(e,t){t.exports=function(e,t){"use strict";var n={learn:{"class":"learn",text:"Learn"}};e.scb=function(){var e=n.learn;return t("a",{"class":"single-continue-button "+e.class},[t("div",{"class":"single-continue-button-icon"}),t("div",{"class":"single-continue-button-label"},[t("div",{"class":"single-continue-button-next"},_t("Next Up")),t("div",{"class":"single-continue-button-text"},e.text)]),t("div",{"class":"single-continue-button-arrow"})])}}},{}],4:[function(e,t){t.exports=function(e,t,n){"use strict";n.courses={unenroll_press:function(){var e=t(this).dataAttr("course-id");return n.modal.yes_no(_t("Quit this course"),n.trans.quitCourse,function(){n.courses.unenroll(e)}),!1},unenroll:function(i){t.ajax({url:"/ajax/courses/quit/",data:{course_id:i},type:"POST",success:function(t){t.success&&(localStorage.removeItem("dashboard_filter"),e(n.courses).emit("unenrolled",[i]))}})}},n.renderer.ready(function(){t(document).on("click",'[data-role="course-unenroll"]',n.courses.unenroll_press)})}},{}],5:[function(e,t){t.exports=function(e,t,n,i){"use strict";function r(e){this.photo=n.prop(e.photo),this.username=n.prop(e.username),this.position=n.prop(e.position),this.points=n.prop(e.points),this.id=n.prop(e.uid),this.following=n.prop(e.following),this.hovering=n.prop(!1)}function o(e){return n("ul.leaderboard-rows",e.vm.rows().map(function(i,r){var o=i.id()===t.user.id,s=o?"leaderboard-row current":"leaderboard-row",u=0!==r||o?"row-points":"row-points best";return n("li",{key:i.id(),"class":s},[n("span.row-pic",[e.vm.largeBoard()?n("strong",i.position()+"."):"",n("img",{src:i.photo()})]),n("span.row-username",[e.vm.largeBoard()?"":n("strong",i.position()+"."),n("span",{"data-role":"hovercard","data-user-id":i.id(),"data-direction":"right"},i.username()),e.vm.showFollow()?a(e,i):[]]),n("span",{"class":u},[n("span",Handlebars.helpers.intcomma(i.points()))])])}))}function a(e,r){if(r.id()===t.user.id)return[];var o=n("a",{onclick:i.partial(e.toggleFollow,r),onmouseenter:function(){r.hovering(!0)},onmouseout:function(){r.hovering(!1)}},_t(r.hovering()?"unfollow?":"following")),a=n("a",{onclick:i.partial(e.toggleFollow,r)},_t("follow"));return[r.following()?o:a]}function s(e){return n(".leaderboard-controls",n("ul.btn-group",[n("li.btn.btn-small"+("week"===e.vm.period()?".active":""),{onclick:i.partial(e.setPeriod,"week").bind(e)},_t("Week")),n("li.btn.btn-small"+("month"===e.vm.period()?".active":""),{onclick:i.partial(e.setPeriod,"month").bind(e)},_t("Month")),n("li.btn.btn-small"+("alltime"===e.vm.period()?".active":""),{onclick:i.partial(e.setPeriod,"alltime").bind(e)},_t("All Time"))]))}function u(e){return 0===e.vm.rows().length||e.vm.rows().length%e.vm.howMany()!==0||e.vm.hasPageSet()?[]:n(".leaderboard-link",[n("a",{onclick:function(){e.fetchRows()}},_t("More"))])}t.newLeaderboard=function(i){var a={vm:{fullBoardUrl:n.prop(i.fullBoardUrl),howMany:n.prop(i.howMany||10),showTabs:n.prop(i.showTabs),showFollow:n.prop(i.showFollow),period:n.prop("week"),largeBoard:n.prop(i.large),offset:n.prop(0),rows:n.prop([]),hasPageSet:n.prop(window.location.href.indexOf("?page=")>-1)}};return a.controller=function(){var o={vm:a.vm,fetchRows:function(){var a=this.vm,s=a.rows().length,u=a.howMany(),l=a.hasPageSet(),c=a.rows(),d=c[c.length-1],f=d&&d.id()===t.user.id&&d.position()>c.length;if(f){var h=c.pop();s-=1,h&&h.position()<c.length+a.howMany()&&(u+=1)}var m=sprintf("?period=%s&how_many=%d",a.period(),u);if(l){var p=parseInt(window.location.href.match(/page=([0-9])/)[1]);p>0&&(s=p*u-u)}0!==s&&(m+=sprintf("&offset=%d",s)),n.request({method:"GET",url:i.endPoint+m,unwrapSuccess:function(e){return e.rows},type:r}).then(function(t){var n=window.location.pathname+"?page=",i=s+1,r=u-1;if(i>r){var l=parseInt((i-r)/r)+1,d=e("head").find('link[rel="prev"]');d.length>0?d.attr("href",n+l):e("head").append(e("<link>").attr("rel","prev").attr("href",n+l))}if(0!==a.rows().length||a.rows().length%o.vm.howMany()===0){var m=parseInt((i+r)/r)+1,p=e("head").find('link[rel="next"]');p.length>0?p.attr("href",n+m):e("head").append(e("<link>").attr("rel","next").attr("href",n+m))}return 0===s?a.rows(t):(f&&h.position()>c.length+t.length&&t.push(h),void a.rows(c.concat(t)))})},toggleFollow:function(e){n.post({url:"/ajax/mempal_add/",data:{to_user_id:e.id()}}).then(function(){e.following(!e.following())},function(e){t.modal.error(e.error)})},setPeriod:function(e){this.vm.period(e),this.vm.rows([]),this.fetchRows()}};return o.fetchRows(0),o},a.view=function(e){return n(".leaderboard",[n(".leaderboard-header",[n("span.leaderboard-image"),n("span.leaderboard-text",_t("Leaderboard"))]),e.vm.showTabs()?s(e):[],n(".leaderboard-content",[o(e),e.vm.largeBoard()?u(e):n(".leaderboard-link",[n("a",{href:e.vm.fullBoardUrl()},_t("More"))])])])},a}}},{}],6:[function(e,t){t.exports=function(e,t){"use strict";t.learning_performance={};var n=t.learning_performance,i=null;e.extend(!0,t.learning_performance,{initTestingGraph:function(){n.initTestingDropdowns(),n.setTestingLazyLoading(),n.setImageGrab()},initTestingDropdowns:function(){e(".filters").on("click",".filter .dropdown-menu a",function(t){t.preventDefault();var i=e(this),r=i.closest(".filter"),o=e(".btn1",r),a=i.data("filter"),s={filter:a};i.data("id")&&(s.id=i.data("id")),o.toggleClass("bgGreen"),i.parent("li").addClass("active").siblings().removeClass("active"),o.text(e(this).text()),n.loadTestingData(s,n.updateTestingChart)}).on("click",".btn1",function(t){t.stopPropagation(),e(this).siblings(".dropdown-toggle").click()})},setTestingLazyLoading:function(){n.isVisible("#lazy-learning-insight")?(e(window).unbind("scroll"),n.loadTestingData(null,n.initialTestingLoadCallback)):e(window).scroll(function(){n.isVisible("#lazy-learning-insight")&&(e(window).unbind("scroll"),n.loadTestingData(null,n.initialTestingLoadCallback))})},isVisible:function(t){var n=e(window).scrollTop(),i=n+e(window).height(),r=e(t).offset();return null===r?!1:r.top<=i},setImageGrab:function(){"undefined"!=typeof d3&&(e("#screencapture a").on("click",function(e){e.preventDefault()}),d3.select("#screencapture a").on("click",function(){var e=d3.select("#chart-testing svg").attr("version",1.1).attr("xmlns","http://www.w3.org/2000/svg").node().parentNode.innerHTML,t=/<image.*?>[\w|\d|\w]*<\/image>/gi,i=e.replace(t,""),r="data:image/svg+xml;base64,"+window.btoa(i),o='<img src="'+r+'" alt="">';d3.select("#imageGrab").html(o),n.showModal()}))},showModal:function(){MEMRISE.modal.content({modalId:"imageForumPost",showHeader:!0,showFooter:!1,backdrop:!0,keyboard:!0,template:"imageForumPost",shadow:!1,headerText:_t("Start a new thread on forum with your testing behavior image included"),seeThru:!1,removeOnHidden:!0},function(){n.initPostForm()})},initPostForm:function(){e("#imageGrab img").clone().appendTo(e(".modalContent .postedImage"))},updateTestingChart:function(e){i.dataProvider=e.data,i.validateData()},initialTestingLoadCallback:function(t){var r=n.setTestingData(t);i=AmCharts.makeChart("chart-testing",{type:"xy",theme:"none",pathToImages:"https://www.amcharts.com/lib/3/images/",dataProvider:r,chartCursor:{},legend:{useGraphSettings:!0,equalWidths:!1,fontSize:13,rollOverGraphAlpha:.15,switchable:!0},valueAxes:[{title:_t("Time of the day"),position:"bottom",autoGridCount:!1,gridCount:12,maximum:23,minimum:0},{title:_t("Response time in seconds"),position:"left",autoGridCount:!1,gridCount:10,maximum:20}],startDuration:.3,graphs:[{id:"correct",balloonText:_t("At __tag1__ your __br__ average response __br__ time is __tag2__.",{tag1:"<b>[[yCorrectBalloon]]</b>",br:"<br />",tag2:"<b>[[y]]s</b>"}),bullet:"bubble",lineColor:"#83c53d",lineAlpha:0,title:_t("Correct"),xField:"xCorrect",yField:"yCorrect",valueField:"amountCorrect",fillAlphas:0,bulletBorderAlpha:.2,maxBulletSize:20,minBulletSize:4},{id:"nearlyCorrect",balloonText:_t("At __tag1__ your __br__ average response __br__ time is __tag2__.",{tag1:"<b>[[yNearlyCorrectBalloon]]</b>",br:"<br />",tag2:"<b>[[y]]s</b>"}),bullet:"bubble",lineColor:"#e89c06",lineAlpha:0,title:_t("Nearly correct"),xField:"xNearlyCorrect",yField:"yNearlyCorrect",valueField:"amountNearlyCorrect",fillAlphas:0,bulletBorderAlpha:.2,maxBulletSize:20,minBulletSize:4},{id:"incorrect",balloonText:_t("At __tag1__ your __br__ average response __br__ time is __tag2__.",{tag1:"<b>[[yIncorrectBalloon]]</b>",br:"<br />",tag2:"<b>[[y]]s</b>"}),bullet:"bubble",lineColor:"#bb2e25",lineAlpha:0,title:_t("Incorrect"),xField:"xIncorrect",yField:"yIncorrect",valueField:"amountIncorrect",fillAlphas:0,bulletBorderAlpha:.2,maxBulletSize:20,minBulletSize:4}],chartScrollbar:{backgroundColor:"#15a1ec",updateOnReleaseOnly:!1}}),e("#chart-testing").css("visibility","visible").parent().find(".loading-spinner").hide()},loadTestingData:function(t,n){e.ajax({type:"GET",url:"/ajax/metrics/fancy_tests_graph/",async:!0,data:t,success:function(e){"function"==typeof n&&n(e.data)}})},initAttendanceDataGrid:function(){e.ajax({type:"GET",url:"/ajax/metrics/learning_streak_graph/",success:function(t){var n=e("#attendance-grid");n.html(""),new MEMRISE.charts.AttendanceGrid({elem:n,data:t.attendance_data,dateField:"day",countField:"num_events",countName:"Learning Event"});var i,r,o=e("#attendance-grid-label1"),a=e("#attendance-grid-label2"),s=e("#attendance-grid-label3");r=t.total_days_learned,i=_t(1==r?"day":"days"),o.show().find(".body").html('<span class="large">'+r+'</span><span class="day">'+i+"</span>"),r=t.longest_streak,i=_t(1==r?"day":"days"),a.show().find(".body").html('<span class="large">'+r+'</span><span class="day">'+i+"</span>"),r=t.current_streak,i=_t(1==r?"day":"days"),s.show().find(".body").html('<span class="large">'+r+'</span><span class="day">'+i+"</span>")}})},initMostLearntCoursesChart:function(t){AmCharts.makeChart("chart-coursetime",{type:"pie",theme:"none",minRadius:100,dataProvider:t,valueField:"time",titleField:"course",labelsEnabled:!1,colors:["#15a1ec","#aa5f86","#e89c06","#83c53d","#ff1605","#aa5f10"],pieX:"20%",pieY:"44%",legend:{position:"absolute",width:300,top:10,right:120,verticalGap:20,markerType:"square",markerSize:32,valueText:"[[none]]"},balloonText:"<span style='font-size:10px'><b>[[course]]</b><br />[[timehms]]</span>"});e.each(t,function(t,n){var i=n.id?"/course/"+n.id:"/courses/",r=_t("Learn");e(".whitebox.buttons .btns").append("<a href='"+i+"' class='btn btn-success btn-green'>"+r+"</a>")})},setTestingData:function(e){for(var t,n=[],i=[],r=[],o=0;o<e.length;o++)0!==e[o].correct_resp_time&&n.push({yCorrect:e[o].correct_resp_time,xCorrect:e[o].x_axis,yCorrectBalloon:e[o].time,amountCorrect:e[o].correct}),0!==e[o].partially_correct_resp_time&&i.push({yNearlyCorrect:e[o].partially_correct_resp_time,xNearlyCorrect:e[o].x_axis,yNearlyCorrectBalloon:e[o].time,amountNearlyCorrect:e[o].partially_correct}),0!==e[o].incorrect_resp_time&&r.push({yIncorrect:e[o].incorrect_resp_time,xIncorrect:e[o].x_axis,yIncorrectBalloon:e[o].time,amountIncorrect:e[o].incorrect});return t=n.concat(i),t.concat(r)}})}},{}],7:[function(e,t){t.exports=function(e,t){"use strict";t.learning_preferences={};var n=t.learning_preferences;e.extend(!0,t.learning_preferences,{init:function(){e(".wrapper.pace").on("click",".btn-group .dropdown-menu a",function(t){t.preventDefault(),n.changeLearningPace(e(this))}),e(".yesno").click(function(){n.changeYesNoPreferences(e(this))}),e(".wrapper").on("click",".btn1",function(t){t.stopPropagation(),e(this).siblings(".dropdown-toggle").click()}),n.updateLearningPace()},updateLearningPace:function(){var t,n=e("#garden_plant_size").data("selected"),i=e("#garden_water_size").data("selected"),r=[_t("Standard"),_t("Advanced"),_t("Super Advanced"),_t("Custom")];t=20==n&&100==i?2:10==n&&50==i?1:5==n&&25==i?0:3,e("#preference").text(r[t]),e(".preference .dropdown-menu a[data-pref='"+t+"']").parent("li").addClass("active").siblings().removeClass("active")},changeLearningPace:function(t){var i,r,o=t.parents(".btn-group").find(".btn1"),a=o.attr("id"),s=t.attr("data-pref");if(t.parent("li").addClass("active").siblings().removeClass("active"),"preference"==a){if(o.text(t.text()),2==s)i=20,r=100;else if(1==s)i=10,r=50;else{if(0!=s)return;i=5,r=25}e(".paceValues.plant-size .dropdown-menu a[data-pref='"+i+"']").parent("li").addClass("active").siblings().removeClass("active"),e(".paceValues.water-size .dropdown-menu a[data-pref='"+r+"']").parent("li").addClass("active").siblings().removeClass("active")}else"garden_plant_size"==a?(i=s,r=e("#garden_water_size").data("selected")):"garden_water_size"==a&&(r=s,i=e("#garden_plant_size").data("selected"));e("#garden_plant_size").text(i).data("selected",i),e("#garden_water_size").text(r).data("selected",r),n.updateLearningPace(),n.saveSettings({garden_plant_size:i,garden_water_size:r})},changeYesNoPreferences:function(t){var i,r=t.siblings(".btn1"),o=r.find("span"),a=t.data("content"),s="",u=t.data("setting-type"),l={};switch(u){case"audio":i="garden_disable_audio";break;case"tapping":default:i="garden_disable_tapping"}o.animate({"margin-left":a?-150:100},150,function(){a?(r.removeClass("hl-success").addClass("hl-danger"),s=_t("No"),o.css("margin-left",100),t.find("span").removeClass("ico-arr-left").addClass("ico-arr-right")):(r.removeClass("hl-danger").addClass("hl-success"),o.css("margin-left",-150),s=_t("Yes"),t.find("span").removeClass("ico-arr-right").addClass("ico-arr-left")),a=!a,e(o).text(s),t.data("content",a),o.animate({"margin-left":0},150)}),l[i]=a?"true":"false",n.saveSettings(l)},saveSettings:function(t){e.ajax({type:"POST",url:"/ajax/accounts/update_settings/",data:t})}})}},{}],8:[function(e,t){t.exports=function(e,t){"use strict";t.mem_editor={};var n=t.mem_editor;e.extend(!0,t.mem_editor,{open_tutorial:function(e,t){new MEMRISE.ui.ModalSlides("mem-creation",{skippable:!0,class_names:"mem-creation-mem-editor",on_close:e,show_overlay:"undefined"!=typeof t?t:!0}).open()},open:function(e,i,r){return t.user.profile.settings.mem_creation_tutorial_seen?void(n.current||("undefined"==typeof r&&(r=null),t.renderer.ready(function(){jQuery.loadIfNDefScript(n,"Modal",t.urls.memEditor,function(){n.current||(n.current=new n.Modal(e,i,r),_(n).emit("opened"),_(n.current).on("closed",function(){delete n.current,_(n).emit("closed")}))})}))):void n.open_tutorial(function(){t.user.profile.settings.mem_creation_tutorial_seen=!0,t.profile.update_json_setting("mem_creation_tutorial_seen",!0),n.open(e,i,r)})}})}},{}],9:[function(e,t){t.exports=function(e,t,n){"use strict";t.mems={};var i=t.mems;e.extend(!0,t.mems,{flag_press:function(){var n=e(this).dataAttr("mem-id");return t.modal.yes_no(_t("Flag this mem as inappropriate?"),_t("You will not see this mem again and a member of staff will be alerted to check its content. __br__ Are you sure you want to go ahead?",{br:"<br />"}),function(){i.flag(n)}),!1},flag:function(t){e.ajax({type:"POST",url:"/ajax/mem/flag/",data:{mem_id:t},success:function(e){e&&n(i).emit("flagged",[t])}})},flagged_press:function(){t.modal.info(_t("Flagged"),_t("You have flagged this mem as inappropriate - staff members will check its content."))},create:function(e){t.mem_editor.open(e,t.mems.created_broadcast)},created_broadcast:function(){n(i).emit("created",arguments)},edit_press:function(){var t=e(this).dataAttr("mem-id"),n=e(this).dataAttr("column-a"),r=e(this).dataAttr("column-b"),o=e(this).dataAttr("thing-id");return i.edit(t,o,n,r),!1},edit:function(n,r,o,a){e.ajax({type:"GET",url:"/api/mem/get/",data:{mem_id:n,thing_id:r,column_a:o,column_b:a},success:function(e){t.mem_editor.open(e.learnable,i.edited_broadcast,e.mem)}})},edited_broadcast:function(){n(i).emit("edited",arguments)},remove_press:function(){var n=e(this).dataAttr("mem-id"),r=e(this).dataAttr("thing-id");return t.modal.yes_no(_t("Remove mem?"),_t("Are you sure you want to remove this mem from this word? If it is attached to other words on the site, it will remain there."),function(){i.remove(n,r)}),!1},remove:function(t,r){e.ajax({type:"POST",url:"/ajax/mem/remove/",data:{mem_id:t,thing_id:r},success:function(e){e.success&&n(i).emit("deleted",[e.mem_id])}})},delete_press:function(){var n=e(this).dataAttr("mem-id");return t.modal.yes_no(_t("Delete mem?"),_t("Are you sure you want to delete this mem?"),function(){i.delete_mem(n)}),!1},delete_mem:function(t){e.ajax({type:"POST",url:"/ajax/mem/delete/",data:{mem_id:t},success:function(e){e.success&&n(i).emit("deleted",[e.mem_id])}})},choose_mem:function(t,r){var o={learnable_id:t,mem_id:r};n(i).emit("choose-sending",[t,r]),e.ajax({url:"/api/mem/choose/",type:"post",data:o,success:function(e){e.success&&n(i).emit("chosen",[e.mem,e.thinguser])}})}}),t.renderer.ready(function(){e(document).on("click",".mem-edit-button",i.edit_press),e(document).on("click",".mem-flag-button",i.flag_press),e(document).on("click",".mem-flagged-button",i.flagged_press),e(document).on("click",".mem-remove-button",i.remove_press),e(document).on("click",".mem-delete-button",i.delete_press)})}},{}],10:[function(e,t){t.exports=function(e,t,n,i){"use strict";i.MemStream=e.create({initialize:function(e,t,i){var r={$elem:n(null),mem_options:{},masonry:!1};if(i=n.extend({},r,i),this.$elem=i.$elem,this.mems=e,this.learnables=t,this.mem_options=i.mem_options,this.masonry=i.masonry,0===this.mems.length)return this.$elem.find(".empty-message").show(),void n(".infinite-scroller").hide();this.bind();var o=this;this.masonry?n.loadIfNDefScript(window,"mason","dist/js/masonry.pkgd.min.js?v=11",function(){o.add_masonry(),o.load_next()}):this.load_next(),this.start_observers()},destroy:function(){this.$elem=n(null),this.$loading=n(null),this.$mems=n(null),this.i=0,this.mems=[],this.learnables={}},bind:function(){this.$mems=this.$elem.find(".mems"),0===this.$mems.length&&(this.$elem.prepend('<div class="mems"></div>'),this.$mems=this.$elem.find(".mems")),this.$loading=n('<div class="loading center hide"><div class="loading-spinner"></div></div>'),this.$mems.after(this.$loading)},loading:!1,i:0,load_next:function(){if(this.i===this.mems.length)return this.loading=!1,void this.$loading.hide();this.$loading.show(),this.loading=!0;var e=this.mems[this.i],t=this.learnableForMem(e),r=i.renderer.render_mem(e,t,this.mem_options),o=n(r),a=this;o.imagesLoaded(function(){a.mem_loaded(o)})},learnableForMem:function(e){return this.learnables[e.learnable_id]},mem_loaded:function(e){var t=this;i.renderer.do_embeds(e),this.$mems.append(e),this.masonry&&(this.$mems.masonry("appended",e),n.doTimeout("memstream_masonry",2e3,function(){t.$mems.masonry()})),this.i+=1,n.doTimeout(20,function(){t.load_next()})},add_masonry:function(){this.$mems.addClass("masonry").masonry({itemSelector:".mem",isFitWidth:!0,columnWidth:300,gutter:10})},start_observers:function(){this.on_deleted=this.on_flagged=t.bind(this.on_deleted,this),this.on_edited=t.bind(this.on_edited,this),t(i.mems).on("deleted",this.on_deleted),t(i.mems).on("flagged",this.on_flagged),t(i.mems).on("edited",this.on_edited)},on_deleted:function(e){var t=this,i=this.$elem.find(".mem[data-mem-id="+e+"]");this.masonry?(this.$mems.masonry("remove",i),n.doTimeout(500,function(){t.$mems.masonry()})):i.slideUp()},on_edited:function(e){var t=this,r=this.learnableForMem(e),o=i.renderer.render_mem(e,r,t.mem_options),a=n(o);i.renderer.do_embeds(a),this.$elem.find(".mem[data-mem-id="+e.id+"]").replaceWith(a),this.masonry&&n.doTimeout(500,function(){t.$mems.masonry("reload")})}})}},{}],11:[function(e,t){t.exports=function(e,t){"use strict";t.profile={},e.extend(!0,t.profile,{update_json_setting:function(n,i,r){e.ajax({url:"/ajax/accounts/update_setting/",type:"POST",data:{key:n,value:i},success:function(e){t.user.profile.settings[n]=i,"function"==typeof r&&r(e)}})}}),e("#disconnect").on("click",function(n){n.preventDefault(),e.ajax({url:"/accounts/disconnect/facebook/",type:"POST",complete:function(e){200===e.status&&(window.location="/home/?disconnected=true")},error:function(){t.modal.error(_t("Oops, something went wrong. Please try again later!"))}})})}},{}],12:[function(e,t){t.exports=function(e,t,n,i){"use strict";var r,o={mouseleave_threshold:500,trigger_spacing:20},a={hovercard:".hovercard"},s={directions:{left:"hovercard-left",right:"hovercard-right",top:"hovercard-top",bottom:"hovercard-bottom"}};r=t.create({initialize:function(e,t,n){this.user=t,this.direction=n||"right",this.$trigger=e,this.update()},set_user:function(e){this.user=e,this.update()},update:function(){this.$card&&this.destroy(),this.$card=this.render(),this.align(),this.$elements=this.$card.add(this.$trigger),this.$elements.data("hovercard",this),this.bind()},render:function(){var e=null;this.user&&(e=i.users.get_context(this.user),e=this.setUpBadgeInfo(e));var t=n(MEMRISE.renderer.render("hovercard",{the_user:e}));return t.appendTo("body"),n('*[data-toggle="tooltip"]').tooltip(),t},setUpBadgeInfo:function(e){var t=e.badges;if(t.goal_streak){var n=t.goal_streak.level%35,i="";i=n>29?"c5":n>19?"c4":n>14?"c3":n>6?"c2":n>2?"c1":"c0",e.badges.goal_streak.color=i}return e},get_alignment:function(e){var t=this.$trigger.offset(),n=0,i=0;return("top"===e||"bottom"===e)&&(n=t.left+(this.$trigger.outerWidth()-this.$card.outerWidth())/2,i="top"===e?t.top-this.$card.outerHeight()-o.trigger_spacing:t.top+this.$trigger.outerHeight()+o.trigger_spacing),("left"===e||"right"===e)&&(i=t.top+(this.$trigger.outerHeight()-this.$card.outerHeight())/2,n="left"===e?t.left-this.$card.outerWidth()-o.trigger_spacing:t.left+this.$trigger.outerWidth()+o.trigger_spacing),{x:n,y:i}},align:function(){var e,t=this.get_alignment(this.direction),i=n(window),r=i.width(),o=i.height(),a=i.scrollLeft(),u=i.scrollTop(),l=!1,c=this.direction;for("left"===this.direction&&t.x<a?l="right":"right"===this.direction&&t.x+this.$card.outerWidth()>a+r?l="left":"top"===this.direction&&t.y<u?l="bottom":"bottom"===this.direction&&t.y+this.$card.outerHeight()>u+o&&(l="top"),l&&(t=this.get_alignment(l),c=l),e=0;e<s.directions.length;e+=1)this.$card.removeClass(s.directions[e]);this.$card.addClass(s.directions[c]),this.$card.css({left:t.x,top:t.y})},bind:function(){var e=this;this.$elements.on("mouseenter",function(){e.on_mouse_enter()}),this.$elements.on("mouseleave",function(){e.on_mouse_leave()})},destroy:function(){this.$elements.off("mouseenter").off("mouseleave"),this.$card.remove(),this.$trigger.removeData("hovercard")},on_mouse_enter:function(){this.hover_timer&&clearTimeout(this.hover_timer)},on_mouse_leave:function(){var e=this;this.hover_timer&&clearTimeout(this.hover_timer),this.hover_timer=setTimeout(function(){e.destroy()},o.mouseleave_threshold)}}),e.has(i,"ui")||(i.ui={}),i.ui.HoverCard=r;var u={};i.renderer.ready(function(){n(document).on("mouseenter",'[data-role="hovercard"][data-user-id]:visible',function(){var e,t=n(this),r=parseInt(t.dataAttr("user-id"),10),o=t.dataAttr("direction"),s=null;u.hasOwnProperty(r)&&(s=u[r]),"undefined"==typeof t.data("hovercard")?(n(a.hovercard).each(function(){n(this).data("hovercard").destroy()}),e=new i.ui.HoverCard(t,s,o)):e=t.data("hovercard"),null===s&&n.ajax({url:"/api/user/get/",type:"GET",data:{user_id:r,with_leaderboard:!0},success:function(t){u[r]=t.user,e.set_user(t.user)}})})}),e(i.users).on("follow-press",function(t){e.has(u,t.user.id)&&(u[t.user.id]=n.extend(u[t.user.id],t.user))})}},{}],13:[function(e,t){t.exports=function(e,t,n,i,r){"use strict";var o;o=t.create({initialize:function(t,n){var i="modal-slides-"+t;n||(n={}),this.show_overlay=e.has(n,"show_overlay")?n.show_overlay:!0,this.closed=!1,this.on_close=n.on_close||null,this.context={title:n.title||null,icon:n.icon||null,class_names:i+" "+(n.class_names||""),skippable:n.skippable||null},this.template_name=t},open:function(){return this.render(),this.bind(),this.current=-1,this.next(),this},has_slide:function(e){return e<this.$slides.length&&e>=0},next:function(){var e=this.current+1;return this.has_slide(e)?(this.$slides.hide().eq(e).show(),this.current=e,this.$elem.modal("show"),this.show_overlay&&this.$backdrop.show(),this):void this.close()},close:function(){return this.$elem.remove(),this.show_overlay?this.$backdrop.fadeOut(200,function(){n(this).remove()}):n(this).remove(),"function"==typeof this.on_close&&this.on_close(),this.closed=!0,this},bind:function(){var e=this;this.$elem.on("hidden.bs.modal",function(){e.next()}),n("body").on("keydown",function(t){e.closed===!1&&t.keyCode===r.ENTER&&(e.$elem.modal("hide"),t.preventDefault())}),this.$elem.on("click",'[data-role="show-next"]',function(t){e.$elem.modal("hide"),t.preventDefault()}),this.$elem.on("click",'[data-role="skip"]',function(t){e.current=e.$slides.length,e.$elem.modal("hide"),t.preventDefault()})},render:function(){this.context.slides=i.renderer.render("modal-slides-"+this.template_name),this.context.slides=this.context.slides,this.$elem=n(i.renderer.render("modal-slides",this.context)),this.$backdrop=this.show_overlay?n(i.renderer.render("modal-backdrop")):null,this.$elem.add(this.$backdrop).appendTo("body"),this.$slides=this.$elem.find('[data-role="slides"]>li'),this.$elem.modal({backdrop:!1})}}),i.hasOwnProperty("ui")||(i.ui={}),i.ui.ModalSlides=o,n(document).ready(function(){n("body").on("click",'[data-role="open-modal-slides"]',function(){new MEMRISE.ui.ModalSlides(n(this).dataAttr("type"),{skippable:!0,on_close:function(){}}).open()})})}},{}],14:[function(e,t){t.exports=function(e,t){"use strict";t.users={},e.extend(!0,t.users,{get_context:function(n){var i=e.extend(!0,{},n);return i.is_self=i.id===t.user.id,i},mempal_add_press:function(){var n=e(this).dataAttr("user-id"),i=e(this);e.ajax({url:"/ajax/mempal_add/",type:"POST",data:{to_user_id:n},success:function(e){e.success?(_(t.users).emit("follow-press",[e]),t.users.mempal_add_success(i,n,e)):e.error&&t.modal.error(e.error)}})},mempal_add_success:function(n,i,r){var o,a=t.renderer.render("mempal-button",r.user),s=e(a);n=n.replaceWith(s),r.user.current_follows?(o=1,s.addClass("added")):o=-1,e('[data-user-id="'+t.user.id+'"]').find('[data-role="following-count"]').each(function(){var t=e(this),n=parseInt(t.text(),10);t.text(n+o)}),e('[data-user-id="'+i+'"]').find('[data-role="follower-count"]').each(function(){var t=e(this),n=parseInt(t.text(),10);t.text(n+o)})}}),t.renderer.ready(function(){e(document).on("click",".mempal-button",t.users.mempal_add_press)})}},{}],15:[function(e,t){t.exports=function(e,t,n){"use strict";var i=function(){this.playing=!1,this.currentUrl=null,this.play=function(e){var t=this,n=e.url||null;if(null===n)return!1;if(!this.setMute()){var i=this.loadSound(n);i&&(this.stop(),this.triggerSound({sound:i,onplay:function(){t.playing=!0,t.currentUrl=n,null!==e.onplay&&e.onplay(n)},onfinish:function(){t.playing=!1,null!==e.onfinish&&e.onfinish(n),t.whenFinishedCallback&&(t.whenFinishedCallback(),delete t.whenFinishedCallback)}}))}},this.setMute=function(){var t=e("body").hasClass("audio-muted");return t?(n.mute(),!0):(n.unmute(),!1)},this.loadSound=function(e){var t;return n&&n.ok()&&n.canPlayURL(e)&&(this.currentUrl=e,t=n.createSound({id:e,url:e})),t},this.triggerSound=function(e){e.sound.play({onplay:e.onplay,onfinish:e.onfinish,onstop:e.onfinish})},this.stop=function(){n.stopAll(),this.playing=!1,this.currentUrl=null,e.doTimeout("AudioPlayer-stopAfter")},this.stopAfter=function(t){var n=this;this.playing&&e.doTimeout("AudioPlayer-stopAfter",t,function(){n.stop()})},this.whenFinished=function(e){this.playing?this.whenFinishedCallback=e:e()}};t.audioPlayer=new i,e(document).on("memrise.audio-play","a.audio-player",function(){var n=e(this);t.audioPlayer.play({url:n.attr("href"),onplay:function(){n.addClass("playing")},onfinish:function(){n.removeClass("playing")}})}).on("memrise.audio-stop","a.audio-player",function(){t.audioPlayer.stop()}).on("memrise.audio-toggle-mute","body",function(){e("body").toggleClass("audio-muted");var n=t.audioPlayer.setMute();e.ajax({url:"/ajax/mute/",type:"POST",data:{muted:n}})}).on("mouseenter","a.audio-player.audio-player-hover",function(t){MEMRISE.is_iOS_optimised||e(this).trigger("memrise.audio-play"),t.preventDefault()}).on("click","a.audio-player.audio-player-hover",function(t){MEMRISE.is_iOS_optimised&&e(this).trigger("memrise.audio-play"),t.preventDefault()})}},{}],16:[function(e,t){t.exports=function(e){"use strict";return{SECOND:1e3,MINUTE:6e4,HOUR:36e5,DAY:864e5,WEEK:6048e5,now:function(){return new Date},today:function(){var e=new Date;return e.setHours(0),e.setMinutes(0),e.setSeconds(0),e.setMilliseconds(0),e},time_since:function(e){return this.now()-e},timedelta:function(t){var n=0;return e.has(t,"seconds")&&(n+=t.seconds*this.SECOND),e.has(t,"minutes")&&(n+=t.minutes*this.MINUTE),e.has(t,"hours")&&(n+=t.hours*this.HOUR),e.has(t,"days")&&(n+=t.days*this.DAY),e.has(t,"weeks")&&(n+=t.weeks*this.WEEK),n},getWeekdayName:function(e,t){var n=[_t("Sunday"),_t("Monday"),_t("Tuesday"),_t("Wednesday"),_t("Thursday"),_t("Friday"),_t("Saturday")];return t?n[e][0]:n[e]},getMonthName:function(e){var t=[_t("January"),_t("February"),_t("March"),_t("April"),_t("May"),_t("June"),_t("July"),_t("August"),_t("September"),_t("October"),_t("November"),_t("December")];return t[e]}}}},{}],17:[function(e,t){t.exports=function(e,t){"use strict";function n(){o.toggleClass("is-active"),s.toggleClass("is-active"),u.toggleClass("is-active"),r||(e.get("/ajax/user/profile/",function(e){var n=t.renderer.render("header-profile-content",e);a.html(n),i()}),r=!0)}function i(){var t=e(".js-progress-bar"),n=t.attr("data-progress");t.animate({width:100*n+"%"})}var r=!1,o=e(".header-profile-inner"),a=e(".profile-details"),s=e(".header-info-card"),u=e(".header-dropdown-arrow");e(".js-info-toggle").on("click",function(e){n(),e.stopPropagation()}),e(document).on("click",function(t){o.hasClass("is-active")&&e(t.target).closest("ul")[0]!==o[0]&&n()})}},{}],18:[function(e,t){t.exports=function(e,t,n,i,r){"use strict";i.registerHelper("debug",function(e){console.log("Current Context"),console.log("===================="),console.log(this),e&&(console.log("Value"),console.log("===================="),console.log(e))});var o={loaded:!1,ready_function_stack:[],ready:function(e){o.loaded?e():o.ready_function_stack.push(e)},load:function(t){if(!o.loaded){n.has(t,"partials")?e.each(t.partials,function(e,t){i.registerPartial(e,i.compile(t,{preventIndent:!0}))
}):n.has(t,"compiled_partials")&&t.compiled_partials(),o.set_default_context(),o.loaded=!0;for(var r=0;r<o.ready_function_stack.length;r+=1)o.ready_function_stack[r]();o.ready_function_stack=[]}},fixMediaUrl:function(e){return n.contains(e,"http")?e:t.STATIC_URL+e.replace(/^\/?/,"")},escape:function(e){var t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};return String(e).replace(/[&<>"'\/]/g,function(e){return t[e]})},unescape:function(e){var t={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#x2F;":"/"};return String(e).replace(/(&(amp|lt|gt|quot|#39|#x2F);)/g,function(e){return t[e]})},set_default_context:function(){o.default_context={DEBUG:t.DEBUG,STATIC_URL:t.STATIC_URL,user:t.user,DEBUG_OR_STAFF:t.DEBUG||t.user.is_staff,DOMAIN:t.DOMAIN}},render:function(t,n,r){var a=e.extend({},o.default_context,n);return i.partials[t](a,{data:r})},allowed_tags:"p,strong,em,pre,code",rich_format:function(n){n=n.replace(/img:http:\/\/www.memrise.com\/static\//g,"img:"+t.STATIC_URL),n=n.replace(/img:http:\/\/memrise.com\/static\//g,"img:"+t.STATIC_URL),n=n.replace(/img:\/static\//g,"img:"+t.STATIC_URL),n=n.replace(/img:([^\s<]+)/g,"`img:$1`");var i=r.toHTML(n),a=e("<div>").html(i);a.find("*").each(function(){e(this).is(o.allowed_tags)||e(this).remove()});var s=e.trim(a.html());return""===s&&(s="<p>&nbsp;</p>"),s=s.replace(/img:\s*([^\s<]+)/g,"<img class='img-tag' src='$1' />"),s=s.replace(/embed:\s*([^\s<]+)/g,"<a class='embed' href='$1' target='_blank'>$1</a>")},get_mem_context:function(i,r,a){var s={show_author:!1,open_links_blank:!1,show_thing:!1,editable:!1,show_remove:!0,show_source:!1,show_flagged_stats:!1,show_flagging:!0};"undefined"!=typeof a&&(s=e.extend(s,a));var u=e.extend(!0,{},i),l=t.user.is_authenticated,c=l&&n.has(i,"author")&&i.author.id===t.user.id;if(u.show_author=s.show_author,u.show_remove=s.show_remove,u.open_links_blank=s.open_links_blank,u.editable=s.editable&&l,u.show_flagged_stats=s.show_flagged_stats,u.show_flagging=s.show_flagging,u.can_flag=!c&&!i.flagged,u.can_remove=u.can_edit||c,u.can_delete=u.can_edit,u.show_source=s.show_source&&u.search_source>"",u.show_source){var d=e("<a />");d.attr("href",u.search_source),u.search_source_hostname=d[0].hostname}return u.show_thing=s.show_thing&&void 0!==r,s.show_thing&&(u.item=o.getLearnableColumnContext(r.item,[],!0),u.definition=o.getLearnableColumnContext(r.definition,[],!0)),u.middle_html=o.rich_format(u.text),u.sanitized_text=u.text,"rtl"===u.direction&&(u.rtl=!0),u},render_mem:function(t,n,i){var r={template:"garden"};"undefined"!=typeof i&&(r=e.extend(r,i));var a=o.get_mem_context(t,n,r);return o.render("mem-"+r.template,a)},do_embeds:function(t){var n=t.find("a.embed"),i=n.filter('*[href*="vzaar.com"]');i.oembed(null,{autoplay:!1});var r=n.filter('*[href*="brainshark.com"]');r.each(function(){var t=e(this).attr("href"),n=t.match(/\d+$/)[0];e(this).replaceWith('<iframe src="http://www.brainshark.com/brainshark/vu/view.asp?pi='+n+'&dm=5&pause=1&nrs=1" frameborder="0" scrolling="no" style="border:1px solid #999999; height:400px;"></iframe>')});var o=n.filter('*[href*="glogster.com"]');o.each(function(){var t=e(this).attr("href"),n=t.match(/glog\/(\w+)/)[1],i=null!==t.match(/tall=1/),r=i?670:366;e(this).replaceWith('<iframe src="http://www.glogster.com/glog/'+n+'" height="'+r+'" width="495" name="glogster-embed-glog" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" style="overflow: hidden;"></iframe>')}),n.not(i).not(r).not(o).embedly({embedly_wmode:"window",key:"eb0a2940f03711e0aff54040d3dc5c07",maxHeight:360,maxWidth:495}).bind("embedly-oembed",function(){var t=e(this).parent();e.doTimeout(10,function(){t.find('iframe[src*="youtube.com"]').each(function(){e(this).attr("src",e(this).attr("src")+"&rel=0&showsearch=0&showinfo=0&modestbranding=1&disablekb=1")})})})},get_pool_context:function(t){var n=e.extend(!0,{},t);return n.columns_list=[],e.each(t.columns,function(t,i){var r=e.extend(!0,{},i);r.key=t,n.columns_list.push(r)}),n},renderAudioPlayer:function(t){var n="";return e.each(t,function(e,t){var i=o.fixMediaUrl(t);n+="<a class='audio-player audio-player-hover' href='"+i+"'></a>"}),n},renderVideoPlayer:function(e){e=o.fixMediaUrl(e);var t="http://videojs.com/html5-video-support/",n=240,i=240,r=" <p class='vjs-no-js'>"+_t("To view this video please enable JavaScript, and consider upgrading to a web browser that __a1__supports HTML5 video",{a1:sprintf("<a href='%s' target='_blank'>",t)})+"</a></p>",a=sprintf("video-%d",Math.floor(1234*Math.random()));return sprintf("<div class='video-container'><video class='video-player video-js vjs-default-skin vjs-big-play-centered' id='%s' width='%d' height='%d'><source src='%s' type='video/mp4'>%s</video></div>",a,n,i,e,r)},renderImageCarousel:function(t){var n={id:"imageCarousel"+Math.floor(1234*Math.random()),vals:[]};return e.each(t,function(e,t){n.vals.unshift({"class":0===e?"active ":"",url:o.fixMediaUrl(t)})}),o.render("multi-image-carousel",n)},renderVal:function(e,t,i,o){if((null===t||0===t.length)&&(t=""),"text"===e)return o?r.toHTML(t):this.escape(t);t instanceof Array||(t=[t]);var a=i?n.sample(t,1):t;return"image"===e?t.length>1?this.renderImageCarousel(n.shuffle(a)):"<img src='"+a[0]+"' />":"audio"===e?this.renderAudioPlayer(a):this.renderVideoPlayer(n.sample(t))},getLearnableColumnContext:function(e,t,n,i){return{label:e.label,alts:e.alternatives,kind:e.kind,extra_classes:t.concat(e.classes),val:o.renderVal(e.kind,e.value,n,i)}},getPresentationContext:function(e){var t=[],n=!1;t.push(this.getLearnableColumnContext(e.item,["primary"],!1,e.markdown)),t.push(this.getLearnableColumnContext(e.definition,["secondary"],!1,e.markdown));for(var i=0;i<e.columns.length;i++){var r=e.columns[i],o=r.always_show?["on-show-more"]:[];"audio"!==r.kind||n||(n=!0,o=["first-audio"]);var a=this.getLearnableColumnContext(r,o,!1);t.push(a)}return{columns:t,attributes:e.attributes}}};return o}},{}],19:[function(e,t){t.exports=function(e,t){"use strict";function n(n,i){e.getJSON("https://api-ssl.bitly.com/v3/shorten?callback=?",{format:"json",apiKey:"R_6d65e5af66d98358c1170add652453ac",login:"memrise",longUrl:n},function(e){var n=e.data.url;t.DEBUG&&(n="https://bit.ly/debug_URL"),i(n)})}function i(){o.width=550,o.height=450,o.left=(e(window).width()-o.width)/2,o.top=(e(window).height()-o.height+50)/2,o.str=r+", width="+o.width+", height="+o.height+", top="+o.top+", left="+o.left}var r,o={},a=t.DOMAIN+window.location.pathname;r="status=no, toolbar=no, menubar=no, location=no",e("body").on("click",'[data-role="twitter-share"]',function(n){t.sharing.twitterShareClick(e(this)),n.preventDefault()}).on("click",'[data-role="facebook-share"]',function(n){FB&&(t.sharing.facebookShareClick(e(this)),n.preventDefault())}),t.sharing=t.sharing||{},t.sharing.twitterShareClick=function(e){var t,r=e.dataAttr("url")||a,s=e.dataAttr("tweet")||"Check this out!  ",u=e.dataAttr("via")||"memrise",l="GrowYourMind,"+(e.dataAttr("hashtags")||"");i(),n(r,function(e){t="http://twitter.com/intent/tweet?text="+encodeURIComponent(s)+"&url="+encodeURIComponent(e)+"&via="+encodeURIComponent(u)+"&hashtags="+encodeURIComponent(l),window.open(t,"Tweet",o.str)})},t.sharing.facebookShareClick=function(e){var n={method:"feed",link:e.dataAttr("url")||a,picture:e.dataAttr("picture")||null,name:e.dataAttr("title")||null,caption:e.dataAttr("caption")||null,description:e.dataAttr("description")||null};t.DEBUG&&(n.picture="http://placekitten.com/100/100"),FB.ui(n,function(){})}}},{}],20:[function(e,t){t.exports=function(e){"use strict";return{checkTracking:function(t){return e.tracking&&e.tracking[t]?!0:!1},getTrackingAction:function(t){var n=e.tracking[t].action;return delete e.tracking[t].action,n},formatTracking:function(t,n){n&&(e.tracking[t][n]=this.getTrackingId(n))},getTrackingId:function(e){var t=localStorage.getItem(e);return t||(t=uuidV4(),localStorage.setItem(e,t)),t},removeTrackingId:function(e){localStorage.removeItem(e)}}}},{}],21:[function(e,t){t.exports=function(e,t){"use strict";e(document).on("click",".video-container .video-player",function(){var n=e(this);0===n.children("video").length&&t(n.attr("id"),{autoplay:!0,controls:!0,preload:"auto"})})}},{}],22:[function(e,t){t.exports={DISCOUNT_CODES:{20:"MOUSHA",50:"OLIVER"}}},{}],23:[function(e,t){t.exports=function(e,t,n,i){"use strict";function r(e,n){!o(n.type)&&a(n.url)&&e.setRequestHeader("X-CSRFToken",t.csrftoken)}var o,a,s=["Login required.","CSRF failed."];e(document).ready(function(){t.csrftoken&&i.get("csrftoken")!==t.csrftoken&&"NOTPROVIDED"!==t.csrftoken&&i.set("csrftoken",t.csrftoken)}),e(document).ajaxError(function(e,n){403===n.status&&s.indexOf(n.responseText)>-1&&t.modal.error(_t("Uh-oh, something went wrong. Click OK to resume your session ("+n.responseText+")"),function(){window.location.href="/login"})}),o=function(e){return/^(GET|HEAD|OPTIONS|TRACE)$/.test(e)},a=function(e){var t=document.location.host,n=document.location.protocol,i="//"+t,r=n+i;return e===r||e.slice(0,r.length+1)===r+"/"||e===i||e.slice(0,i.length+1)===i+"/"||!/^(\/\/|http:|https:).*/.test(e)},e.ajaxSetup({cache:!1,dataType:"json",beforeSend:r}),n.post=function(e){return e.config=r,e.method="POST",n.request(e)}}},{}],24:[function(e,t){t.exports=function(e,t){"use strict";e("body").prepend('<div id="fb-root"></div>'),window.fbAsyncInit=function(){window.FB.init({appId:t.FACEBOOK_APP_ID,version:"v"+t.FACEBOOK_API_VERSION,status:!0,xfbml:!0,cookie:!0}),e("#fb-root").trigger("facebook:init")},function(e,t,n){var i,r=e.getElementsByTagName(t)[0];e.getElementById(n)||(i=e.createElement(t),i.id=n,i.src="//connect.facebook.net/en_US/sdk.js",r.parentNode.insertBefore(i,r))}(document,"script","facebook-jssdk")}},{}],25:[function(e,t){t.exports=function(t,n,i){var r={showKeyIfEmpty:!0,lng:n.LANG,load:"current",fallbackLng:!1,keyseparator:"&&&&&",nsseparator:"&&&&&&",resGetPath:n.STATIC_URL+n.urls.locale};i.init(r,function(){t(document).ready(function(){n.renderer&&n.renderer.load(n.templates)})}),window._t=i.t,window.plural=e(33)(sprintf)}},{33:33}],26:[function(e,t){t.exports={BACKSPACE:8,CAPS_LOCK:20,COMMA:188,CONTROL:17,DELETE:46,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,SHIFT:16,SPACE:32,TAB:9,UP:38,DOWN:40,LEFT:37,RIGHT:39,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,NUMPAD_ZERO:96,NUMPAD_ONE:97,NUMPAD_TWO:98,NUMPAD_THREE:99,NUMPAD_FOUR:100,NUMPAD_FIVE:101,NUMPAD_SIX:102,NUMPAD_SEVEN:103,NUMPAD_EIGHT:104,NUMPAD_NINE:105,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90}},{}],27:[function(e){window.moment=e(47),e(46)},{46:46,47:47}],28:[function(e,t){t.exports=function(e,t){e.SENTRY_PUBLIC_DSN&&(t.config(e.SENTRY_PUBLIC_DSN).install(),e.user&&e.user.email&&t.setUserContext({id:e.user.id,email:e.user.email}))}},{}],29:[function(e,t){t.exports=function(e){!function(){var t=window.analytics=window.analytics||[];if(!t.initialize)if(t.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{t.invoked=!0,t.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on"],t.factory=function(e){return function(){var n=Array.prototype.slice.call(arguments);return n.unshift(e),t.push(n),t}};for(var n=0;n<t.methods.length;n++){var i=t.methods[n];t[i]=t.factory(i)}t.load=function(e){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+e+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},t.SNIPPET_VERSION="4.0.0",t.load(e.SEGMENT_WEB_KEY),e.user.is_authenticated&&t.identify(e.user.id,{username:e.user.username,is_pro:e.user.is_premium}),t.page()}}()}},{}],30:[function(e,t){t.exports=function(e,t){e.setup({url:t.STATIC_URL+"flash/",useHTML5Audio:!0,debugMode:!1,useConsole:!1,debugFlash:!1,consoleOnly:!1,preferFlash:!1,ontimeout:function(){window.console&&window.console.log("soundManager timed out")}})}},{}],31:[function(e){!function(t){e(28)(t,Raven),e(45)(),e(25)($,t,i18n),e(39)(t,Modernizr),e(34)($),e(35)($,_),e(36)($),e(37)($,t,_),e(38)(_),e(32)($,_,Handlebars,t),e(23)($,t,m,Cookies),e(30)(soundManager,t),e(24)($,t),e(29)(t),e(27),e(28),window.KEY_CODES=e(26),window.uuidV4=e(50),t.CONSTANTS=e(22),window.datetime=e(16)(_),t.renderer=e(18)($,t,_,Handlebars,markdown),e(17)($,t),e(21)($,videojs),e(15)($,t,soundManager),e(19)($,t),e(40)($),e(42)($,t),e(43)(_,$,t,Class),e(44)($,t),e(41)($,t),e(4)(_,$,t),t.leaderboard=e(5)($,t,m,_),e(9)($,t,_,Handlebars),e(10)(Class,_,$,t),e(11)($,t),e(14)($,t),e(7)($,t),e(6)($,t),e(8)($,t),e(12)(_,Class,$,t),e(13)(_,Class,$,t,KEY_CODES),e(3)(t,m),e(1)($,t),e(2)($,t)}(MEMRISE)},{1:1,10:10,11:11,12:12,13:13,14:14,15:15,16:16,17:17,18:18,19:19,2:2,21:21,22:22,23:23,24:24,25:25,26:26,27:27,28:28,29:29,3:3,30:30,32:32,34:34,35:35,36:36,37:37,38:38,39:39,4:4,40:40,41:41,42:42,43:43,44:44,45:45,5:5,50:50,6:6,7:7,8:8,9:9}],32:[function(e,t){t.exports=function(e,t,n,i){"use strict";return n.registerHelper("compare",function(e,t,n){if(arguments.length<3)throw new Error("Handlerbars Helper 'compare' needs 2 parameters");var i=n.hash.operator||"==",r={"==":function(e,t){return e==t},"===":function(e,t){return e===t},"!=":function(e,t){return e!=t},"<":function(e,t){return t>e},">":function(e,t){return e>t},"<=":function(e,t){return t>=e},">=":function(e,t){return e>=t},"typeof":function(e,t){return typeof e==t}};if(!r[i])throw new Error("Handlerbars Helper 'compare' doesn't know the operator "+i);var o=r[i](e,t);return o?n.fn(this):n.inverse(this)}),n.registerHelper("isNonzero",function(e,t){return"number"==typeof e&&0!==e?t.fn(this):t.inverse(this)}),n.registerHelper("timesince",function(t){try{return e.timeago(t)}catch(n){return""}}),n.registerHelper("logContext",function(){return window.console&&window.console.log(this),""}),n.registerHelper("absnumber",function(e){return t.isNumber(e)?0>e?""+e:"+"+e:"NaN"}),n.registerHelper("intcomma",function(e){var t=String(e),i=t.replace(/^(-?\d+)(\d{3})/,"$1,$2");return t===i?i:n.helpers.intcomma(i)}),n.registerHelper("pluralize",function(e,t){return 1===t?e:e+"s"}),n.registerHelper("safeValue",function(e){return new n.SafeString(e)}),n.registerHelper("cssClasses",function(e){return t.isArray(e)?" "+e.join(" "):""}),n.registerHelper("intcommabig",function(e){return t.isNumber(e)?e>-1e4&&1e4>e?n.helpers.intcomma(e):e>-1e6&&1e6>e?n.helpers.intcomma(Math.round(e/1e3))+"k":n.helpers.intcomma(Math.round(e/1e6))+"m":void 0}),n.registerHelper("convertSeconds",function(e){var n,i,r=0>e;return t.isNumber(e)?(r&&(e*=-1),n=e%60,10>n&&(n="0"+n),i=Math.floor(e/60),(r?"-":"")+i+":"+n):""}),n.registerHelper("asset",function(){var e=t.toArray(arguments).slice(0,-1).join("");return i.STATIC_URL+e}),n.registerHelper("zeroPad",function(e,n){for(t.isUndefined(n)&&(n=2),e+="";e.length<n;)e="0"+e;return e}),n.registerHelper("for",function(e,t,n,i){for(var r="",o=e;t>o;o+=n)r+=i.fn(o);return r}),n.registerHelper("monthOptions",function(){for(var e=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],t="",i=(new Date).getMonth(),r=0;12>r;r++){var o=r===i?'selected="selected"':"",a=sprintf("%d - %s",r+1,e[r]);t+=sprintf('<option value="%d" %s>%s</option>',r+1,o,a)}return new n.SafeString(t)}),n.registerHelper("yearOptions",function(){for(var e=(new Date).getFullYear(),t="",i=0;11>i;i++){var r=0===i?'selected="selected"':"",o=sprintf("%d",e+i);t+=sprintf('<option value="%d" %s>%s</option>',e+i,r,o)}return new n.SafeString(t)}),n.registerHelper("_t",function(e,i){if(t.size(i.hash)>0){var r=t.has(i.hash,"context")?i.hash.context:this,o=i18n.functions.extend(i.hash,r);return i.fn&&(o.defaultValue=i.fn(r)),new n.SafeString(_t(e,o))}return new n.SafeString(_t(e))}),n.registerHelper("math",function(e,t,n){return e=parseFloat(e),n=parseFloat(n),{"+":e+n,"-":e-n,"*":e*n,"/":e/n,"%":e%n}[t]}),n.registerHelper("truncate",function(e,t){if(e.length>t){for(var i=e.substr(0,t+1);i.length;){var r=i.substr(-1);if(i=i.substr(0,-1)," "==r)break}return""==i&&(i=e.substr(0,t)),new n.SafeString(i+"...")}return e}),n}},{}],33:[function(e,t){t.exports=function(e){"use strict";return function(t,n,i){return i>1?e(n,{count:i}):e(t,{count:i})}}},{}],34:[function(e,t){t.exports=function(e){"use strict";e.fn.setCursorPosition=function(t){if(e(this).get(0).setSelectionRange)e(this).get(0).setSelectionRange(t,t);else if(e(this).get(0).createTextRange){var n=e(this).get(0).createTextRange();n.collapse(!0),n.moveEnd("character",t),n.moveStart("character",t),n.select()}return e(this)},e.fn.getCursorPosition=function(){var t=0,n=e(this).get(0);if(document.selection){n.focus();var i=document.selection.createRange(),r=document.selection.createRange().text.length;i.moveStart("character",-n.value.length),t=i.text.length-r}else(n.selectionStart||"0"==n.selectionStart)&&(t=n.selectionStart);return t}}},{}],35:[function(e,t){t.exports=function(e,t){"use strict";e.fn.dataAttr=function(e,t){var n="data-"+e,i=this.closest("["+n+"]");if(0===i.length)return t;var r=i.attr(n);return"undefined"==typeof r?t:r},e.fn.dataDict=function(n,i){var r="data-"+n+"-",o={};return e(this).each(function(){e.each(this.attributes,function(){if(this.specified&&t.contains(this.name,r)){var e=this.name.split("="),n=e[0].substring(r.length);o[n]=this.value}})}),0===o.length?i:o}}},{}],36:[function(e,t){t.exports=function(e){"use strict";e.extend({getUrlVar:function(e){var t="[\\?&]"+e+"=([^&#]*)",n=new RegExp(t),i=n.exec(window.location.href);return null===i?void 0:i[1]}})}},{}],37:[function(e,t){t.exports=function(e,t,n){"use strict";e.loadIfNDefScript=function(i,r,o,a){n.has(i,r)?a():e.ajax({dataType:"script",cache:!0,url:t.STATIC_URL+o,success:a})}}},{}],38:[function(e,t){t.exports=function(e){"use strict";return e.mixin({on:function(e,t,n){return this.isString(e)&&(n=t,t=e,e=this),this.isUndefined(e._events)&&(e._events={}),t in e._events||(e._events[t]=[]),e._events[t].push(n),this},off:function(e,t,n){return this.isString(e)&&(n=t,t=e,e=this),!this.isUndefined(e._events)&&t in e._events?(e._events[t]=this.without(e._events[t],n),this):void 0},on_once:function(t,n,i){this.isString(t)&&(i=n,n=t,t=this);var r=function(){e.removeEvent(t,n)};i=e.compose(r,i),this.on(t,n,i)},emit:function(e,t,n){if(this.isString(e)&&(t=e,e=this),!this.isUndefined(e._events)){if(t in e._events)for(var i=e._events[t].concat(),r=0,o=i.length;o>r;r++)i[r].apply(e,void 0===n?[]:n);return this}},removeEvent:function(e,t){this.isString(e)&&(t=e,e=this),this.isUndefined(e._events)||delete e._events[t]}},{chain:!1}),e}},{}],39:[function(e,t){t.exports=function(e,t){"use strict";t.load([{test:t.input.placeholder,nope:[e.STATIC_URL+e.urls.jsPresentationPolyfills,e.STATIC_URL+e.urls.cssPresentationPolyfills]},{test:Array.prototype.indexOf,nope:e.STATIC_URL+e.urls.jsFunctionalPolyfills}])}},{}],40:[function(e,t){t.exports=function(e){"use strict";e(document).on("click","a.disabled, .btn.disabled",function(){return!1})}},{}],41:[function(e,t){t.exports=function(e){"use strict";function t(){var t=e(".set-lang"),n=e(".dropup",t),i=e("#chosen-lang",t),r=e(".lang-info",n),o=e("ul .active",n),a=e("a",n);r.append("<span class='lang-name'>"+e("a",o).text().toUpperCase()+"</span>"),a.on("click",function(n){n.preventDefault();var r=e(this),o=i.val(),a=r.attr("data-lang");i.val(a),o!==a&&t.submit()})}function n(){var t=e(".header-lang-changer"),n=e(".lang-changer-wrapper"),i=e(".header-dropdown-arrow",t),r=e(".dropdown-menu",t),o=e("a",r),a=e(".set-lang");n.on("click",function(){i.toggleClass("is-active")}),o.on("click",function(){var t=e(this).data("lang"),n=e('a[data-lang="'+t+'"]',a);n.click(),i.toggleClass("is-active")}),e(document).click(function(t){var s=t.target;!i.hasClass("is-active")||e(s).is(e("a",a))||e(s).is(n)||e(s).is(r)||e(s).is(o.parent())||i.removeClass("is-active")})}t(),n()}},{}],42:[function(e,t){t.exports=function(e,t){"use strict";var n=e(window);t.modal={error:function(e,n){t.modal.info(_t("Whoops."),e,n)},content:function(n,i,r){var o={template:"",showHeader:!1,showFooter:!1,headerText:"",backdrop:!0,keyboard:!1,modalId:"",shadow:!1,seeThru:!0,fadeTime:"fast",removeOnHidden:!1,templateVars:{},styleVersion:1},a=e.extend({},o,n);t.renderer.ready(function(){var n={title:a.headerText,content:a.template,testVal:a.testVal,id:a.modalId,shadow:a.shadow,fade:!0,fadeTime:a.fadeTime,seeThru:a.seeThru,templateVars:a.templateVars,styleVersion:a.styleVersion},i=t.renderer.render("modal-content-parent",n),o=e(i).appendTo("body");o.on("show.bs.modal",function(){a.showHeader||e(".modal-header",o).hide(),a.showFooter||e(".modal-footer",o).hide()}).on("shown.bs.modal",function(){t.modal.position(o),e(window).resize(function(){t.modal.position(o)}),o.css({display:"none",visibility:"visible"})}).on("hidden.bs.modal",function(){a.removeOnHidden&&o.remove(),_.isFunction(r)&&r()}).modal({backdrop:a.backdrop,keyboard:a.keyboard})}),e(".modal").fadeIn(a.fadeTime),_.isFunction(i)&&i()},position:function(e){var t=e.find(".modal-content").first(),i=e.find(".modal-dialog").first(),r=Math.abs(n.height()-t.height())/2;i.css({top:r-30})},info:function(n,i,r,o){t.renderer.ready(function(){var a={title:n,message:i},s=t.renderer.render("modal-info",a),u=e(s).appendTo("body");"function"==typeof o&&o(),u.on("hide.bs.modal",function(){"function"==typeof r&&r()}).on("shown.bs.modal",function(){u.find(".btn-primary").focus()}).on("hidden.bs.modal",function(){e(this).remove()}).modal("show")})},deletion_confirmation:function(n,i,r,o,a,s,u){t.renderer.ready(function(){var l=t.renderer.render("modal-deletion-confirmation",{title:n,message:i,information_on_string_to_type:r,string_to_type:o,cancel_text:a,ok_text:s}),c=e(l).appendTo("body"),d=c.find(".js-error-message");c.find(".btn-no").on("click",_.once(function(){return c.modal("hide"),!1})),c.find(".btn-yes").on("click",function(){var e=c.find(".js-confirm-message-input"),t=e.val();return t!==o?d.removeClass("hidden"):(c.modal("hide"),"function"==typeof u&&u()),!1}),c.on("shown.bs.modal",function(){c.find(".btn-primary").focus()}).on("hidden.bs.modal",function(){e(this).remove()}).modal("show",{keyboard:!1})})},yes_no:function(n,i,r,o){t.renderer.ready(function(){var a=t.renderer.render("modal-yesno",{title:n,message:i}),s=e(a).appendTo("body");s.find(".btn-no").on("click",_.once(function(){return s.modal("hide"),"function"==typeof o&&o(),!1})),s.find(".btn-yes").on("click",_.once(function(){return s.modal("hide"),"function"==typeof r&&r(),!1})),s.on("shown.bs.modal",function(){s.find(".btn-primary").focus()}).on("hidden.bs.modal",function(){e(this).remove()}).modal("show",{keyboard:!1})})},$spinner:null,spinner_open:function(n,i,r){return t.modal.$spinner?!1:(t.renderer.ready(function(){var o={title:n,message:i,fade:void 0===r?!0:r},a=t.renderer.render("modal-spinner",o);t.modal.$spinner=e(a).appendTo("body"),t.modal.$spinner.modal("show",{keyboard:!1})}),!0)},spinner_close:function(){return t.modal.$spinner?(t.modal.$spinner.on("hide.bs.modal",function(){e(this).remove()}).modal("hide"),t.modal.$spinner=null,!0):!1}}}},{}],43:[function(e,t){t.exports=function(e,t,n,i){"use strict";var r={inner:"ul.slides",slide:"li",prev:".pag.pag-left",next:".pag.pag-right",display:".slideshow-display .inner"},o={disabled:"disabled"};e.has(n,"ui")||(n.ui={}),n.ui.Slideshow=i.create({initialize:function(e){this.outer=e,this.getElements(),this.slideWidth=this.outer.innerWidth(),this.current=0,this.bindClick(),this.updatePagination(),this.updateDisplay()},hasSlide:function(e){return e>=0&&e<=this.slides.length-1},updateDisplay:function(){this.display.html(this.current+1+"/"+this.slides.length)},updatePagination:function(){this.prev.toggleClass(o.disabled,this.current<=0),this.next.toggleClass(o.disabled,this.current>=this.slides.length-1)},slideTo:function(e){this.hasSlide(e)&&(this.inner.css({left:-(e*this.slideWidth)}),this.current=e,this.updateDisplay(),this.updatePagination())},slidePrev:function(){this.slideTo(this.current-1)},slideNext:function(){this.slideTo(this.current+1)},bindClick:function(){var e=this;this.prev.on("click",function(t){e.slidePrev(),t.preventDefault()}),this.next.add(this.inner).on("click",function(t){e.slideNext(),t.preventDefault()})},getElements:function(){this.inner=this.outer.find(r.inner),this.slides=this.inner.find(r.slide),this.prev=this.outer.find(r.prev),this.next=this.outer.find(r.next),this.display=this.outer.find(r.display)}}),t(document).ready(function(){t(".slideshow").each(function(){var e,i=t(this);e=new n.ui.Slideshow(i),i.data("slideShow",e)})})}},{}],44:[function(e,t){t.exports=function(e,t){"use strict";t.Whitebox={defaults:{},centered_box:function(n){var i=e.extend({},this.defaults,n);t.renderer.ready(function(){{var n={content:i.template,data:i.data},r=t.renderer.render(i.parent,n);e(r).appendTo("body")}})}}}},{}],45:[function(e,t){t.exports=function(){"undefined"!=typeof localStorage&&localStorage||(window.localStorage={_data:{},setItem:function(e,t){return this._data[e]=t},getItem:function(e){return this._data[e]},removeItem:function(e){return delete this._data[e]},clear:function(){return this._data={}}})}},{}],46:[function(e){!function(t){function n(e){var t="";if(e=parseInt(e,10),!e||1>e)return t;for(;e;)t+="0",e-=1;return t}function i(e,t,i){return null==e&&(e=""),e=""+e,(i?e:"")+n(t-e.length)+(i?"":e)}function r(e){return"[object Array]"===Object.prototype.toString.call(e)}function o(e){return"[object Object]"===Object.prototype.toString.call(e)}function a(e,t){for(var n=e.length;n-=1;)if(t(e[n]))return e[n]}function s(e,t){var n,i=0,r=e.length;for("function"!=typeof t&&(n=t,t=function(e){return e===n});r>i;){if(t(e[i]))return e[i];i+=1}}function u(e,t){var n=0,i=e.length;if(e&&i)for(;i>n;){if(t(e[n],n)===!1)return;n+=1}}function l(e,t){var n=0,i=e.length,r=[];if(!e||!i)return r;for(;i>n;)r[n]=t(e[n],n),n+=1;return r}function c(e,t){return l(e,function(e){return e[t]})}function d(e){var t=[];return u(e,function(e){e&&t.push(e)}),t}function f(e){var t=[];return u(e,function(e){s(t,e)||t.push(e)}),t}function h(e,t){var n=[];return u(e,function(e){u(t,function(t){e===t&&n.push(e)})}),f(n)}function m(e,t){var n=[];return u(e,function(i,r){return t(i)?void 0:(n=e.slice(r),!1)}),n}function p(e,t){var n=e.slice().reverse();return m(n,t).reverse()}function g(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var _;if("function"==typeof e)try{_=e(47)}catch(v){}if(!_&&t.moment&&(_=t.moment),!_)throw"Moment Duration Format cannot find Moment.js";_.duration.fn.format=function(){var e,t,a,v,y,w,b=[].slice.call(arguments),k=g({},this.format.defaults),S=_.duration(this);return k.duration=this,u(b,function(e){return"string"==typeof e||"function"==typeof e?void(k.template=e):"number"==typeof e?void(k.precision=e):void(o(e)&&g(k,e))}),a=k.types=r(k.types)?k.types:k.types.split(" "),"function"==typeof k.template&&(k.template=k.template.apply(k)),e=new RegExp(l(a,function(e){return k[e].source}).join("|"),"g"),v=function(e){return s(a,function(t){return k[t].test(e)})},t=l(k.template.match(e),function(e,t){var n=v(e),i=e.length;return{index:t,length:i,token:"escape"===n?e.replace(k.escape,"$1"):e,type:"escape"===n||"general"===n?null:n}},this),y=h(a,f(d(c(t,"type")))),y.length?(u(y,function(e,n){var i,r,o,a,s;i=S.as(e),r=i>0?Math.floor(i):Math.ceil(i),o=i-r,a=n+1===y.length,s=!n,u(t,function(t){t.type===e&&(g(t,{value:i,wholeValue:r,decimalValue:o,isLeast:a,isMost:s}),s&&null==k.forceLength&&t.length>1&&(k.forceLength=!0))}),S.subtract(r,e)}),k.trim&&(t=("left"===k.trim?m:p)(t,function(e){return!(e.isLeast||null!=e.type&&e.wholeValue)})),w=!1,"right"===k.trim&&t.reverse(),t=l(t,function(e){var t,r;if(!e.type)return e.token;if(t=e.isLeast&&k.precision<0?(Math.floor(e.wholeValue*Math.pow(10,k.precision))*Math.pow(10,-k.precision)).toString():e.wholeValue.toString(),t=t.replace(/^\-/,""),e.length>1&&(w||e.isMost||k.forceLength)&&(t=i(t,e.length)),e.isLeast&&k.precision>0)switch(r=e.decimalValue.toString().replace(/^\-/,"").split(/\.|e\-/),r.length){case 1:t+="."+i(r[0],k.precision,!0).slice(0,k.precision);break;case 2:t+="."+i(r[1],k.precision,!0).slice(0,k.precision);break;case 3:t+="."+i(n(+r[2]-1)+(r[0]||"0")+r[1],k.precision,!0).slice(0,k.precision);break;default:throw"Moment Duration Format: unable to parse token decimal value."}return e.isMost&&e.value<0&&(t="-"+t),w=!0,t}),"right"===k.trim&&t.reverse(),t.join("")):c(t,"token").join("")},_.duration.fn.format.defaults={escape:/\[(.+?)\]/,years:/[Yy]+/,months:/M+/,weeks:/[Ww]+/,days:/[Dd]+/,hours:/[Hh]+/,minutes:/m+/,seconds:/s+/,milliseconds:/S+/,general:/.+?/,types:"escape years months weeks days hours minutes seconds milliseconds general",trim:"left",precision:0,forceLength:null,template:function(){var e=this.types,t=this.duration,n=a(e,function(e){return t._data[e]});switch(n){case"seconds":return"h:mm:ss";case"minutes":return"d[d] h:mm";case"hours":return"d[d] h[h]";case"days":return"M[m] d[d]";case"weeks":return"y[y] w[w]";case"months":return"y[y] M[m]";case"years":return"y[y]";default:return"y[y] M[m] d[d] h:mm:ss"}}}}(this)},{47:47}],47:[function(e,t,n){!function(e,i){"object"==typeof n&&"undefined"!=typeof t?t.exports=i():"function"==typeof define&&define.amd?define(i):e.moment=i()}(this,function(){"use strict";function n(){return $i.apply(null,arguments)}function i(e){$i=e}function r(e){return"[object Array]"===Object.prototype.toString.call(e)}function o(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function a(e,t){var n,i=[];for(n=0;n<e.length;++n)i.push(t(e[n],n));return i}function s(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e,t){for(var n in t)s(t,n)&&(e[n]=t[n]);return s(t,"toString")&&(e.toString=t.toString),s(t,"valueOf")&&(e.valueOf=t.valueOf),e}function l(e,t,n,i){return Ot(e,t,n,i,!0).utc()}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(e){return null==e._pf&&(e._pf=c()),e._pf}function f(e){if(null==e._isValid){var t=d(e);e._isValid=!(isNaN(e._d.getTime())||!(t.overflow<0)||t.empty||t.invalidMonth||t.invalidWeekday||t.nullInput||t.invalidFormat||t.userInvalidated),e._strict&&(e._isValid=e._isValid&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)}return e._isValid}function h(e){var t=l(0/0);return null!=e?u(d(t),e):d(t).userInvalidated=!0,t}function m(e,t){var n,i,r;if("undefined"!=typeof t._isAMomentObject&&(e._isAMomentObject=t._isAMomentObject),"undefined"!=typeof t._i&&(e._i=t._i),"undefined"!=typeof t._f&&(e._f=t._f),"undefined"!=typeof t._l&&(e._l=t._l),"undefined"!=typeof t._strict&&(e._strict=t._strict),"undefined"!=typeof t._tzm&&(e._tzm=t._tzm),"undefined"!=typeof t._isUTC&&(e._isUTC=t._isUTC),"undefined"!=typeof t._offset&&(e._offset=t._offset),"undefined"!=typeof t._pf&&(e._pf=d(t)),"undefined"!=typeof t._locale&&(e._locale=t._locale),Li.length>0)for(n in Li)i=Li[n],r=t[i],"undefined"!=typeof r&&(e[i]=r);return e}function p(e){m(this,e),this._d=new Date(null!=e._d?e._d.getTime():0/0),Ni===!1&&(Ni=!0,n.updateOffset(this),Ni=!1)}function g(e){return e instanceof p||null!=e&&null!=e._isAMomentObject}function _(e){return 0>e?Math.ceil(e):Math.floor(e)}function v(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=_(t)),n}function y(e,t,n){var i,r=Math.min(e.length,t.length),o=Math.abs(e.length-t.length),a=0;for(i=0;r>i;i++)(n&&e[i]!==t[i]||!n&&v(e[i])!==v(t[i]))&&a++;return a+o}function w(){}function b(e){return e?e.toLowerCase().replace("_","-"):e}function k(e){for(var t,n,i,r,o=0;o<e.length;){for(r=b(e[o]).split("-"),t=r.length,n=b(e[o+1]),n=n?n.split("-"):null;t>0;){if(i=S(r.slice(0,t).join("-")))return i;
if(n&&n.length>=t&&y(r,n,!0)>=t-1)break;t--}o++}return null}function S(n){var i=null;if(!Hi[n]&&"undefined"!=typeof t&&t&&t.exports)try{i=Fi._abbr,e("./locale/"+n),M(i)}catch(r){}return Hi[n]}function M(e,t){var n;return e&&(n="undefined"==typeof t?x(e):D(e,t),n&&(Fi=n)),Fi._abbr}function D(e,t){return null!==t?(t.abbr=e,Hi[e]=Hi[e]||new w,Hi[e].set(t),M(e),Hi[e]):(delete Hi[e],null)}function x(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Fi;if(!r(e)){if(t=S(e))return t;e=[e]}return k(e)}function T(e,t){var n=e.toLowerCase();Gi[n]=Gi[n+"s"]=Gi[t]=e}function C(e){return"string"==typeof e?Gi[e]||Gi[e.toLowerCase()]:void 0}function Y(e){var t,n,i={};for(n in e)s(e,n)&&(t=C(n),t&&(i[t]=e[n]));return i}function O(e,t){return function(i){return null!=i?(P(this,e,i),n.updateOffset(this,t),this):A(this,e)}}function A(e,t){return e._d["get"+(e._isUTC?"UTC":"")+t]()}function P(e,t,n){return e._d["set"+(e._isUTC?"UTC":"")+t](n)}function U(e,t){var n;if("object"==typeof e)for(n in e)this.set(n,e[n]);else if(e=C(e),"function"==typeof this[e])return this[e](t);return this}function I(e,t,n){var i=""+Math.abs(e),r=t-i.length,o=e>=0;return(o?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}function E(e,t,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),e&&(zi[e]=r),t&&(zi[t[0]]=function(){return I(r.apply(this,arguments),t[1],t[2])}),n&&(zi[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function $(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function F(e){var t,n,i=e.match(ji);for(t=0,n=i.length;n>t;t++)i[t]=zi[i[t]]?zi[i[t]]:$(i[t]);return function(r){var o="";for(t=0;n>t;t++)o+=i[t]instanceof Function?i[t].call(r,e):i[t];return o}}function L(e,t){return e.isValid()?(t=N(t,e.localeData()),Ri[t]=Ri[t]||F(t),Ri[t](e)):e.localeData().invalidDate()}function N(e,t){function n(e){return t.longDateFormat(e)||e}var i=5;for(Wi.lastIndex=0;i>=0&&Wi.test(e);)e=e.replace(Wi,n),Wi.lastIndex=0,i-=1;return e}function H(e){return"function"==typeof e&&"[object Function]"===Object.prototype.toString.call(e)}function G(e,t,n){ar[e]=H(t)?t:function(e){return e&&n?n:t}}function j(e,t){return s(ar,e)?ar[e](t._strict,t._locale):new RegExp(W(e))}function W(e){return e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,r){return t||n||i||r}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function R(e,t){var n,i=t;for("string"==typeof e&&(e=[e]),"number"==typeof t&&(i=function(e,n){n[t]=v(e)}),n=0;n<e.length;n++)sr[e[n]]=i}function z(e,t){R(e,function(e,n,i,r){i._w=i._w||{},t(e,i._w,i,r)})}function V(e,t,n){null!=t&&s(sr,e)&&sr[e](t,n._a,n,e)}function B(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function q(e){return this._months[e.month()]}function Z(e){return this._monthsShort[e.month()]}function J(e,t,n){var i,r,o;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(r=l([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(o="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}}function K(e,t){var n;return"string"==typeof t&&(t=e.localeData().monthsParse(t),"number"!=typeof t)?e:(n=Math.min(e.date(),B(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e)}function X(e){return null!=e?(K(this,e),n.updateOffset(this,!0),this):A(this,"Month")}function Q(){return B(this.year(),this.month())}function et(e){var t,n=e._a;return n&&-2===d(e).overflow&&(t=n[lr]<0||n[lr]>11?lr:n[cr]<1||n[cr]>B(n[ur],n[lr])?cr:n[dr]<0||n[dr]>24||24===n[dr]&&(0!==n[fr]||0!==n[hr]||0!==n[mr])?dr:n[fr]<0||n[fr]>59?fr:n[hr]<0||n[hr]>59?hr:n[mr]<0||n[mr]>999?mr:-1,d(e)._overflowDayOfYear&&(ur>t||t>cr)&&(t=cr),d(e).overflow=t),e}function tt(e){n.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function nt(e,t){var n=!0;return u(function(){return n&&(tt(e+"\n"+(new Error).stack),n=!1),t.apply(this,arguments)},t)}function it(e,t){_r[e]||(tt(t),_r[e]=!0)}function rt(e){var t,n,i=e._i,r=vr.exec(i);if(r){for(d(e).iso=!0,t=0,n=yr.length;n>t;t++)if(yr[t][1].exec(i)){e._f=yr[t][0];break}for(t=0,n=wr.length;n>t;t++)if(wr[t][1].exec(i)){e._f+=(r[6]||" ")+wr[t][0];break}i.match(ir)&&(e._f+="Z"),St(e)}else e._isValid=!1}function ot(e){var t=br.exec(e._i);return null!==t?void(e._d=new Date(+t[1])):(rt(e),void(e._isValid===!1&&(delete e._isValid,n.createFromInputFallback(e))))}function at(e,t,n,i,r,o,a){var s=new Date(e,t,n,i,r,o,a);return 1970>e&&s.setFullYear(e),s}function st(e){var t=new Date(Date.UTC.apply(null,arguments));return 1970>e&&t.setUTCFullYear(e),t}function ut(e){return lt(e)?366:365}function lt(e){return e%4===0&&e%100!==0||e%400===0}function ct(){return lt(this.year())}function dt(e,t,n){var i,r=n-t,o=n-e.day();return o>r&&(o-=7),r-7>o&&(o+=7),i=At(e).add(o,"d"),{week:Math.ceil(i.dayOfYear()/7),year:i.year()}}function ft(e){return dt(e,this._week.dow,this._week.doy).week}function ht(){return this._week.dow}function mt(){return this._week.doy}function pt(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function gt(e){var t=dt(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function _t(e,t,n,i,r){var o,a=6+r-i,s=st(e,0,1+a),u=s.getUTCDay();return r>u&&(u+=7),n=null!=n?1*n:r,o=1+a+7*(t-1)-u+n,{year:o>0?e:e-1,dayOfYear:o>0?o:ut(e-1)+o}}function vt(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function yt(e,t,n){return null!=e?e:null!=t?t:n}function wt(e){var t=new Date;return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}function bt(e){var t,n,i,r,o=[];if(!e._d){for(i=wt(e),e._w&&null==e._a[cr]&&null==e._a[lr]&&kt(e),e._dayOfYear&&(r=yt(e._a[ur],i[ur]),e._dayOfYear>ut(r)&&(d(e)._overflowDayOfYear=!0),n=st(r,0,e._dayOfYear),e._a[lr]=n.getUTCMonth(),e._a[cr]=n.getUTCDate()),t=0;3>t&&null==e._a[t];++t)e._a[t]=o[t]=i[t];for(;7>t;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[dr]&&0===e._a[fr]&&0===e._a[hr]&&0===e._a[mr]&&(e._nextDay=!0,e._a[dr]=0),e._d=(e._useUTC?st:at).apply(null,o),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[dr]=24)}}function kt(e){var t,n,i,r,o,a,s;t=e._w,null!=t.GG||null!=t.W||null!=t.E?(o=1,a=4,n=yt(t.GG,e._a[ur],dt(At(),1,4).year),i=yt(t.W,1),r=yt(t.E,1)):(o=e._locale._week.dow,a=e._locale._week.doy,n=yt(t.gg,e._a[ur],dt(At(),o,a).year),i=yt(t.w,1),null!=t.d?(r=t.d,o>r&&++i):r=null!=t.e?t.e+o:o),s=_t(n,i,r,a,o),e._a[ur]=s.year,e._dayOfYear=s.dayOfYear}function St(e){if(e._f===n.ISO_8601)return void rt(e);e._a=[],d(e).empty=!0;var t,i,r,o,a,s=""+e._i,u=s.length,l=0;for(r=N(e._f,e._locale).match(ji)||[],t=0;t<r.length;t++)o=r[t],i=(s.match(j(o,e))||[])[0],i&&(a=s.substr(0,s.indexOf(i)),a.length>0&&d(e).unusedInput.push(a),s=s.slice(s.indexOf(i)+i.length),l+=i.length),zi[o]?(i?d(e).empty=!1:d(e).unusedTokens.push(o),V(o,i,e)):e._strict&&!i&&d(e).unusedTokens.push(o);d(e).charsLeftOver=u-l,s.length>0&&d(e).unusedInput.push(s),d(e).bigHour===!0&&e._a[dr]<=12&&e._a[dr]>0&&(d(e).bigHour=void 0),e._a[dr]=Mt(e._locale,e._a[dr],e._meridiem),bt(e),et(e)}function Mt(e,t,n){var i;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(i=e.isPM(n),i&&12>t&&(t+=12),i||12!==t||(t=0),t):t}function Dt(e){var t,n,i,r,o;if(0===e._f.length)return d(e).invalidFormat=!0,void(e._d=new Date(0/0));for(r=0;r<e._f.length;r++)o=0,t=m({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],St(t),f(t)&&(o+=d(t).charsLeftOver,o+=10*d(t).unusedTokens.length,d(t).score=o,(null==i||i>o)&&(i=o,n=t));u(e,n||t)}function xt(e){if(!e._d){var t=Y(e._i);e._a=[t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],bt(e)}}function Tt(e){var t=new p(et(Ct(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function Ct(e){var t=e._i,n=e._f;return e._locale=e._locale||x(e._l),null===t||void 0===n&&""===t?h({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),g(t)?new p(et(t)):(r(n)?Dt(e):n?St(e):o(t)?e._d=t:Yt(e),e))}function Yt(e){var t=e._i;void 0===t?e._d=new Date:o(t)?e._d=new Date(+t):"string"==typeof t?ot(e):r(t)?(e._a=a(t.slice(0),function(e){return parseInt(e,10)}),bt(e)):"object"==typeof t?xt(e):"number"==typeof t?e._d=new Date(t):n.createFromInputFallback(e)}function Ot(e,t,n,i,r){var o={};return"boolean"==typeof n&&(i=n,n=void 0),o._isAMomentObject=!0,o._useUTC=o._isUTC=r,o._l=n,o._i=e,o._f=t,o._strict=i,Tt(o)}function At(e,t,n,i){return Ot(e,t,n,i,!1)}function Pt(e,t){var n,i;if(1===t.length&&r(t[0])&&(t=t[0]),!t.length)return At();for(n=t[0],i=1;i<t.length;++i)(!t[i].isValid()||t[i][e](n))&&(n=t[i]);return n}function Ut(){var e=[].slice.call(arguments,0);return Pt("isBefore",e)}function It(){var e=[].slice.call(arguments,0);return Pt("isAfter",e)}function Et(e){var t=Y(e),n=t.year||0,i=t.quarter||0,r=t.month||0,o=t.week||0,a=t.day||0,s=t.hour||0,u=t.minute||0,l=t.second||0,c=t.millisecond||0;this._milliseconds=+c+1e3*l+6e4*u+36e5*s,this._days=+a+7*o,this._months=+r+3*i+12*n,this._data={},this._locale=x(),this._bubble()}function $t(e){return e instanceof Et}function Ft(e,t){E(e,0,0,function(){var e=this.utcOffset(),n="+";return 0>e&&(e=-e,n="-"),n+I(~~(e/60),2)+t+I(~~e%60,2)})}function Lt(e){var t=(e||"").match(ir)||[],n=t[t.length-1]||[],i=(n+"").match(xr)||["-",0,0],r=+(60*i[1])+v(i[2]);return"+"===i[0]?r:-r}function Nt(e,t){var i,r;return t._isUTC?(i=t.clone(),r=(g(e)||o(e)?+e:+At(e))-+i,i._d.setTime(+i._d+r),n.updateOffset(i,!1),i):At(e).local()}function Ht(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Gt(e,t){var i,r=this._offset||0;return null!=e?("string"==typeof e&&(e=Lt(e)),Math.abs(e)<16&&(e=60*e),!this._isUTC&&t&&(i=Ht(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==e&&(!t||this._changeInProgress?rn(this,Xt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,n.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:Ht(this)}function jt(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Wt(e){return this.utcOffset(0,e)}function Rt(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ht(this),"m")),this}function zt(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Lt(this._i)),this}function Vt(e){return e=e?At(e).utcOffset():0,(this.utcOffset()-e)%60===0}function Bt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function qt(){if("undefined"!=typeof this._isDSTShifted)return this._isDSTShifted;var e={};if(m(e,this),e=Ct(e),e._a){var t=e._isUTC?l(e._a):At(e._a);this._isDSTShifted=this.isValid()&&y(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Zt(){return!this._isUTC}function Jt(){return this._isUTC}function Kt(){return this._isUTC&&0===this._offset}function Xt(e,t){var n,i,r,o=e,a=null;return $t(e)?o={ms:e._milliseconds,d:e._days,M:e._months}:"number"==typeof e?(o={},t?o[t]=e:o.milliseconds=e):(a=Tr.exec(e))?(n="-"===a[1]?-1:1,o={y:0,d:v(a[cr])*n,h:v(a[dr])*n,m:v(a[fr])*n,s:v(a[hr])*n,ms:v(a[mr])*n}):(a=Cr.exec(e))?(n="-"===a[1]?-1:1,o={y:Qt(a[2],n),M:Qt(a[3],n),d:Qt(a[4],n),h:Qt(a[5],n),m:Qt(a[6],n),s:Qt(a[7],n),w:Qt(a[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(r=tn(At(o.from),At(o.to)),o={},o.ms=r.milliseconds,o.M=r.months),i=new Et(o),$t(e)&&s(e,"_locale")&&(i._locale=e._locale),i}function Qt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function en(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function tn(e,t){var n;return t=Nt(t,e),e.isBefore(t)?n=en(e,t):(n=en(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function nn(e,t){return function(n,i){var r,o;return null===i||isNaN(+i)||(it(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period)."),o=n,n=i,i=o),n="string"==typeof n?+n:n,r=Xt(n,i),rn(this,r,e),this}}function rn(e,t,i,r){var o=t._milliseconds,a=t._days,s=t._months;r=null==r?!0:r,o&&e._d.setTime(+e._d+o*i),a&&P(e,"Date",A(e,"Date")+a*i),s&&K(e,A(e,"Month")+s*i),r&&n.updateOffset(e,a||s)}function on(e,t){var n=e||At(),i=Nt(n,this).startOf("day"),r=this.diff(i,"days",!0),o=-6>r?"sameElse":-1>r?"lastWeek":0>r?"lastDay":1>r?"sameDay":2>r?"nextDay":7>r?"nextWeek":"sameElse";return this.format(t&&t[o]||this.localeData().calendar(o,this,At(n)))}function an(){return new p(this)}function sn(e,t){var n;return t=C("undefined"!=typeof t?t:"millisecond"),"millisecond"===t?(e=g(e)?e:At(e),+this>+e):(n=g(e)?+e:+At(e),n<+this.clone().startOf(t))}function un(e,t){var n;return t=C("undefined"!=typeof t?t:"millisecond"),"millisecond"===t?(e=g(e)?e:At(e),+e>+this):(n=g(e)?+e:+At(e),+this.clone().endOf(t)<n)}function ln(e,t,n){return this.isAfter(e,n)&&this.isBefore(t,n)}function cn(e,t){var n;return t=C(t||"millisecond"),"millisecond"===t?(e=g(e)?e:At(e),+this===+e):(n=+At(e),+this.clone().startOf(t)<=n&&n<=+this.clone().endOf(t))}function dn(e,t,n){var i,r,o=Nt(e,this),a=6e4*(o.utcOffset()-this.utcOffset());return t=C(t),"year"===t||"month"===t||"quarter"===t?(r=fn(this,o),"quarter"===t?r/=3:"year"===t&&(r/=12)):(i=this-o,r="second"===t?i/1e3:"minute"===t?i/6e4:"hour"===t?i/36e5:"day"===t?(i-a)/864e5:"week"===t?(i-a)/6048e5:i),n?r:_(r)}function fn(e,t){var n,i,r=12*(t.year()-e.year())+(t.month()-e.month()),o=e.clone().add(r,"months");return 0>t-o?(n=e.clone().add(r-1,"months"),i=(t-o)/(o-n)):(n=e.clone().add(r+1,"months"),i=(t-o)/(n-o)),-(r+i)}function hn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function mn(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():L(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):L(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function pn(e){var t=L(this,e||n.defaultFormat);return this.localeData().postformat(t)}function gn(e,t){return this.isValid()?Xt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function _n(e){return this.from(At(),e)}function vn(e,t){return this.isValid()?Xt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function yn(e){return this.to(At(),e)}function wn(e){var t;return void 0===e?this._locale._abbr:(t=x(e),null!=t&&(this._locale=t),this)}function bn(){return this._locale}function kn(e){switch(e=C(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function Sn(e){return e=C(e),void 0===e||"millisecond"===e?this:this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms")}function Mn(){return+this._d-6e4*(this._offset||0)}function Dn(){return Math.floor(+this/1e3)}function xn(){return this._offset?new Date(+this):this._d}function Tn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Cn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Yn(){return f(this)}function On(){return u({},d(this))}function An(){return d(this).overflow}function Pn(e,t){E(0,[e,e.length],0,t)}function Un(e,t,n){return dt(At([e,11,31+t-n]),t,n).week}function In(e){var t=dt(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==e?t:this.add(e-t,"y")}function En(e){var t=dt(this,1,4).year;return null==e?t:this.add(e-t,"y")}function $n(){return Un(this.year(),1,4)}function Fn(){var e=this.localeData()._week;return Un(this.year(),e.dow,e.doy)}function Ln(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Nn(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Hn(e){return this._weekdays[e.day()]}function Gn(e){return this._weekdaysShort[e.day()]}function jn(e){return this._weekdaysMin[e.day()]}function Wn(e){var t,n,i;for(this._weekdaysParse=this._weekdaysParse||[],t=0;7>t;t++)if(this._weekdaysParse[t]||(n=At([2e3,1]).day(t),i="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[t]=new RegExp(i.replace(".",""),"i")),this._weekdaysParse[t].test(e))return t}function Rn(e){var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Nn(e,this.localeData()),this.add(e-t,"d")):t}function zn(e){var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function Vn(e){return null==e?this.day()||7:this.day(this.day()%7?e:e-7)}function Bn(e,t){E(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function qn(e,t){return t._meridiemParse}function Zn(e){return"p"===(e+"").toLowerCase().charAt(0)}function Jn(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Kn(e,t){t[mr]=v(1e3*("0."+e))}function Xn(){return this._isUTC?"UTC":""}function Qn(){return this._isUTC?"Coordinated Universal Time":""}function ei(e){return At(1e3*e)}function ti(){return At.apply(null,arguments).parseZone()}function ni(e,t,n){var i=this._calendar[e];return"function"==typeof i?i.call(t,n):i}function ii(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function ri(){return this._invalidDate}function oi(e){return this._ordinal.replace("%d",e)}function ai(e){return e}function si(e,t,n,i){var r=this._relativeTime[n];return"function"==typeof r?r(e,t,n,i):r.replace(/%d/i,e)}function ui(e,t){var n=this._relativeTime[e>0?"future":"past"];return"function"==typeof n?n(t):n.replace(/%s/i,t)}function li(e){var t,n;for(n in e)t=e[n],"function"==typeof t?this[n]=t:this["_"+n]=t;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function ci(e,t,n,i){var r=x(),o=l().set(i,t);return r[n](o,e)}function di(e,t,n,i,r){if("number"==typeof e&&(t=e,e=void 0),e=e||"",null!=t)return ci(e,t,n,r);var o,a=[];for(o=0;i>o;o++)a[o]=ci(e,o,n,r);return a}function fi(e,t){return di(e,t,"months",12,"month")}function hi(e,t){return di(e,t,"monthsShort",12,"month")}function mi(e,t){return di(e,t,"weekdays",7,"day")}function pi(e,t){return di(e,t,"weekdaysShort",7,"day")}function gi(e,t){return di(e,t,"weekdaysMin",7,"day")}function _i(){var e=this._data;return this._milliseconds=Kr(this._milliseconds),this._days=Kr(this._days),this._months=Kr(this._months),e.milliseconds=Kr(e.milliseconds),e.seconds=Kr(e.seconds),e.minutes=Kr(e.minutes),e.hours=Kr(e.hours),e.months=Kr(e.months),e.years=Kr(e.years),this}function vi(e,t,n,i){var r=Xt(t,n);return e._milliseconds+=i*r._milliseconds,e._days+=i*r._days,e._months+=i*r._months,e._bubble()}function yi(e,t){return vi(this,e,t,1)}function wi(e,t){return vi(this,e,t,-1)}function bi(e){return 0>e?Math.floor(e):Math.ceil(e)}function ki(){var e,t,n,i,r,o=this._milliseconds,a=this._days,s=this._months,u=this._data;return o>=0&&a>=0&&s>=0||0>=o&&0>=a&&0>=s||(o+=864e5*bi(Mi(s)+a),a=0,s=0),u.milliseconds=o%1e3,e=_(o/1e3),u.seconds=e%60,t=_(e/60),u.minutes=t%60,n=_(t/60),u.hours=n%24,a+=_(n/24),r=_(Si(a)),s+=r,a-=bi(Mi(r)),i=_(s/12),s%=12,u.days=a,u.months=s,u.years=i,this}function Si(e){return 4800*e/146097}function Mi(e){return 146097*e/4800}function Di(e){var t,n,i=this._milliseconds;if(e=C(e),"month"===e||"year"===e)return t=this._days+i/864e5,n=this._months+Si(t),"month"===e?n:n/12;switch(t=this._days+Math.round(Mi(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}}function xi(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*v(this._months/12)}function Ti(e){return function(){return this.as(e)}}function Ci(e){return e=C(e),this[e+"s"]()}function Yi(e){return function(){return this._data[e]}}function Oi(){return _(this.days()/7)}function Ai(e,t,n,i,r){return r.relativeTime(t||1,!!n,e,i)}function Pi(e,t,n){var i=Xt(e).abs(),r=mo(i.as("s")),o=mo(i.as("m")),a=mo(i.as("h")),s=mo(i.as("d")),u=mo(i.as("M")),l=mo(i.as("y")),c=r<po.s&&["s",r]||1===o&&["m"]||o<po.m&&["mm",o]||1===a&&["h"]||a<po.h&&["hh",a]||1===s&&["d"]||s<po.d&&["dd",s]||1===u&&["M"]||u<po.M&&["MM",u]||1===l&&["y"]||["yy",l];return c[2]=t,c[3]=+e>0,c[4]=n,Ai.apply(null,c)}function Ui(e,t){return void 0===po[e]?!1:void 0===t?po[e]:(po[e]=t,!0)}function Ii(e){var t=this.localeData(),n=Pi(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function Ei(){var e,t,n,i=go(this._milliseconds)/1e3,r=go(this._days),o=go(this._months);e=_(i/60),t=_(e/60),i%=60,e%=60,n=_(o/12),o%=12;var a=n,s=o,u=r,l=t,c=e,d=i,f=this.asSeconds();return f?(0>f?"-":"")+"P"+(a?a+"Y":"")+(s?s+"M":"")+(u?u+"D":"")+(l||c||d?"T":"")+(l?l+"H":"")+(c?c+"M":"")+(d?d+"S":""):"P0D"}var $i,Fi,Li=n.momentProperties=[],Ni=!1,Hi={},Gi={},ji=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Wi=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Ri={},zi={},Vi=/\d/,Bi=/\d\d/,qi=/\d{3}/,Zi=/\d{4}/,Ji=/[+-]?\d{6}/,Ki=/\d\d?/,Xi=/\d{1,3}/,Qi=/\d{1,4}/,er=/[+-]?\d{1,6}/,tr=/\d+/,nr=/[+-]?\d+/,ir=/Z|[+-]\d\d:?\d\d/gi,rr=/[+-]?\d+(\.\d{1,3})?/,or=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ar={},sr={},ur=0,lr=1,cr=2,dr=3,fr=4,hr=5,mr=6;E("M",["MM",2],"Mo",function(){return this.month()+1}),E("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),E("MMMM",0,0,function(e){return this.localeData().months(this,e)}),T("month","M"),G("M",Ki),G("MM",Ki,Bi),G("MMM",or),G("MMMM",or),R(["M","MM"],function(e,t){t[lr]=v(e)-1}),R(["MMM","MMMM"],function(e,t,n,i){var r=n._locale.monthsParse(e,i,n._strict);null!=r?t[lr]=r:d(n).invalidMonth=e});var pr="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),gr="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),_r={};n.suppressDeprecationWarnings=!1;var vr=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yr=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],wr=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],br=/^\/?Date\((\-?\d+)/i;n.createFromInputFallback=nt("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),E(0,["YY",2],0,function(){return this.year()%100}),E(0,["YYYY",4],0,"year"),E(0,["YYYYY",5],0,"year"),E(0,["YYYYYY",6,!0],0,"year"),T("year","y"),G("Y",nr),G("YY",Ki,Bi),G("YYYY",Qi,Zi),G("YYYYY",er,Ji),G("YYYYYY",er,Ji),R(["YYYYY","YYYYYY"],ur),R("YYYY",function(e,t){t[ur]=2===e.length?n.parseTwoDigitYear(e):v(e)}),R("YY",function(e,t){t[ur]=n.parseTwoDigitYear(e)}),n.parseTwoDigitYear=function(e){return v(e)+(v(e)>68?1900:2e3)};var kr=O("FullYear",!1);E("w",["ww",2],"wo","week"),E("W",["WW",2],"Wo","isoWeek"),T("week","w"),T("isoWeek","W"),G("w",Ki),G("ww",Ki,Bi),G("W",Ki),G("WW",Ki,Bi),z(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=v(e)});var Sr={dow:0,doy:6};E("DDD",["DDDD",3],"DDDo","dayOfYear"),T("dayOfYear","DDD"),G("DDD",Xi),G("DDDD",qi),R(["DDD","DDDD"],function(e,t,n){n._dayOfYear=v(e)}),n.ISO_8601=function(){};var Mr=nt("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var e=At.apply(null,arguments);return this>e?this:e}),Dr=nt("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var e=At.apply(null,arguments);return e>this?this:e});Ft("Z",":"),Ft("ZZ",""),G("Z",ir),G("ZZ",ir),R(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Lt(e)});var xr=/([\+\-]|\d\d)/gi;n.updateOffset=function(){};var Tr=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Cr=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;Xt.fn=Et.prototype;var Yr=nn(1,"add"),Or=nn(-1,"subtract");n.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var Ar=nt("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});E(0,["gg",2],0,function(){return this.weekYear()%100}),E(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Pn("gggg","weekYear"),Pn("ggggg","weekYear"),Pn("GGGG","isoWeekYear"),Pn("GGGGG","isoWeekYear"),T("weekYear","gg"),T("isoWeekYear","GG"),G("G",nr),G("g",nr),G("GG",Ki,Bi),G("gg",Ki,Bi),G("GGGG",Qi,Zi),G("gggg",Qi,Zi),G("GGGGG",er,Ji),G("ggggg",er,Ji),z(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=v(e)}),z(["gg","GG"],function(e,t,i,r){t[r]=n.parseTwoDigitYear(e)}),E("Q",0,0,"quarter"),T("quarter","Q"),G("Q",Vi),R("Q",function(e,t){t[lr]=3*(v(e)-1)}),E("D",["DD",2],"Do","date"),T("date","D"),G("D",Ki),G("DD",Ki,Bi),G("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),R(["D","DD"],cr),R("Do",function(e,t){t[cr]=v(e.match(Ki)[0],10)});var Pr=O("Date",!0);E("d",0,"do","day"),E("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),E("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),E("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),E("e",0,0,"weekday"),E("E",0,0,"isoWeekday"),T("day","d"),T("weekday","e"),T("isoWeekday","E"),G("d",Ki),G("e",Ki),G("E",Ki),G("dd",or),G("ddd",or),G("dddd",or),z(["dd","ddd","dddd"],function(e,t,n){var i=n._locale.weekdaysParse(e);null!=i?t.d=i:d(n).invalidWeekday=e}),z(["d","e","E"],function(e,t,n,i){t[i]=v(e)});var Ur="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ir="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Er="Su_Mo_Tu_We_Th_Fr_Sa".split("_");E("H",["HH",2],0,"hour"),E("h",["hh",2],0,function(){return this.hours()%12||12}),Bn("a",!0),Bn("A",!1),T("hour","h"),G("a",qn),G("A",qn),G("H",Ki),G("h",Ki),G("HH",Ki,Bi),G("hh",Ki,Bi),R(["H","HH"],dr),R(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),R(["h","hh"],function(e,t,n){t[dr]=v(e),d(n).bigHour=!0});var $r=/[ap]\.?m?\.?/i,Fr=O("Hours",!0);E("m",["mm",2],0,"minute"),T("minute","m"),G("m",Ki),G("mm",Ki,Bi),R(["m","mm"],fr);var Lr=O("Minutes",!1);E("s",["ss",2],0,"second"),T("second","s"),G("s",Ki),G("ss",Ki,Bi),R(["s","ss"],hr);var Nr=O("Seconds",!1);E("S",0,0,function(){return~~(this.millisecond()/100)}),E(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),E(0,["SSS",3],0,"millisecond"),E(0,["SSSS",4],0,function(){return 10*this.millisecond()}),E(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),E(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),E(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),E(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),E(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),T("millisecond","ms"),G("S",Xi,Vi),G("SS",Xi,Bi),G("SSS",Xi,qi);var Hr;for(Hr="SSSS";Hr.length<=9;Hr+="S")G(Hr,tr);for(Hr="S";Hr.length<=9;Hr+="S")R(Hr,Kn);var Gr=O("Milliseconds",!1);E("z",0,0,"zoneAbbr"),E("zz",0,0,"zoneName");var jr=p.prototype;jr.add=Yr,jr.calendar=on,jr.clone=an,jr.diff=dn,jr.endOf=Sn,jr.format=pn,jr.from=gn,jr.fromNow=_n,jr.to=vn,jr.toNow=yn,jr.get=U,jr.invalidAt=An,jr.isAfter=sn,jr.isBefore=un,jr.isBetween=ln,jr.isSame=cn,jr.isValid=Yn,jr.lang=Ar,jr.locale=wn,jr.localeData=bn,jr.max=Dr,jr.min=Mr,jr.parsingFlags=On,jr.set=U,jr.startOf=kn,jr.subtract=Or,jr.toArray=Tn,jr.toObject=Cn,jr.toDate=xn,jr.toISOString=mn,jr.toJSON=mn,jr.toString=hn,jr.unix=Dn,jr.valueOf=Mn,jr.year=kr,jr.isLeapYear=ct,jr.weekYear=In,jr.isoWeekYear=En,jr.quarter=jr.quarters=Ln,jr.month=X,jr.daysInMonth=Q,jr.week=jr.weeks=pt,jr.isoWeek=jr.isoWeeks=gt,jr.weeksInYear=Fn,jr.isoWeeksInYear=$n,jr.date=Pr,jr.day=jr.days=Rn,jr.weekday=zn,jr.isoWeekday=Vn,jr.dayOfYear=vt,jr.hour=jr.hours=Fr,jr.minute=jr.minutes=Lr,jr.second=jr.seconds=Nr,jr.millisecond=jr.milliseconds=Gr,jr.utcOffset=Gt,jr.utc=Wt,jr.local=Rt,jr.parseZone=zt,jr.hasAlignedHourOffset=Vt,jr.isDST=Bt,jr.isDSTShifted=qt,jr.isLocal=Zt,jr.isUtcOffset=Jt,jr.isUtc=Kt,jr.isUTC=Kt,jr.zoneAbbr=Xn,jr.zoneName=Qn,jr.dates=nt("dates accessor is deprecated. Use date instead.",Pr),jr.months=nt("months accessor is deprecated. Use month instead",X),jr.years=nt("years accessor is deprecated. Use year instead",kr),jr.zone=nt("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",jt);var Wr=jr,Rr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},zr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Vr="Invalid date",Br="%d",qr=/\d{1,2}/,Zr={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Jr=w.prototype;Jr._calendar=Rr,Jr.calendar=ni,Jr._longDateFormat=zr,Jr.longDateFormat=ii,Jr._invalidDate=Vr,Jr.invalidDate=ri,Jr._ordinal=Br,Jr.ordinal=oi,Jr._ordinalParse=qr,Jr.preparse=ai,Jr.postformat=ai,Jr._relativeTime=Zr,Jr.relativeTime=si,Jr.pastFuture=ui,Jr.set=li,Jr.months=q,Jr._months=pr,Jr.monthsShort=Z,Jr._monthsShort=gr,Jr.monthsParse=J,Jr.week=ft,Jr._week=Sr,Jr.firstDayOfYear=mt,Jr.firstDayOfWeek=ht,Jr.weekdays=Hn,Jr._weekdays=Ur,Jr.weekdaysMin=jn,Jr._weekdaysMin=Er,Jr.weekdaysShort=Gn,Jr._weekdaysShort=Ir,Jr.weekdaysParse=Wn,Jr.isPM=Zn,Jr._meridiemParse=$r,Jr.meridiem=Jn,M("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===v(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),n.lang=nt("moment.lang is deprecated. Use moment.locale instead.",M),n.langData=nt("moment.langData is deprecated. Use moment.localeData instead.",x);var Kr=Math.abs,Xr=Ti("ms"),Qr=Ti("s"),eo=Ti("m"),to=Ti("h"),no=Ti("d"),io=Ti("w"),ro=Ti("M"),oo=Ti("y"),ao=Yi("milliseconds"),so=Yi("seconds"),uo=Yi("minutes"),lo=Yi("hours"),co=Yi("days"),fo=Yi("months"),ho=Yi("years"),mo=Math.round,po={s:45,m:45,h:22,d:26,M:11},go=Math.abs,_o=Et.prototype;_o.abs=_i,_o.add=yi,_o.subtract=wi,_o.as=Di,_o.asMilliseconds=Xr,_o.asSeconds=Qr,_o.asMinutes=eo,_o.asHours=to,_o.asDays=no,_o.asWeeks=io,_o.asMonths=ro,_o.asYears=oo,_o.valueOf=xi,_o._bubble=ki,_o.get=Ci,_o.milliseconds=ao,_o.seconds=so,_o.minutes=uo,_o.hours=lo,_o.days=co,_o.weeks=Oi,_o.months=fo,_o.years=ho,_o.humanize=Ii,_o.toISOString=Ei,_o.toString=Ei,_o.toJSON=Ei,_o.locale=wn,_o.localeData=bn,_o.toIsoString=nt("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Ei),_o.lang=Ar,E("X",0,0,"unix"),E("x",0,0,"valueOf"),G("x",nr),G("X",rr),R("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))
}),R("x",function(e,t,n){n._d=new Date(v(e))}),n.version="2.10.6",i(At),n.fn=Wr,n.min=Ut,n.max=It,n.utc=l,n.unix=ei,n.months=fi,n.isDate=o,n.locale=M,n.invalid=h,n.duration=Xt,n.isMoment=g,n.weekdays=mi,n.parseZone=ti,n.localeData=x,n.isDuration=$t,n.monthsShort=hi,n.weekdaysMin=gi,n.defineLocale=D,n.weekdaysShort=pi,n.normalizeUnits=C,n.relativeTimeThreshold=Ui;var vo=n;return vo})},{}],48:[function(e,t){function n(e,t){var n=t||0,r=i;return r[e[n++]]+r[e[n++]]+r[e[n++]]+r[e[n++]]+"-"+r[e[n++]]+r[e[n++]]+"-"+r[e[n++]]+r[e[n++]]+"-"+r[e[n++]]+r[e[n++]]+"-"+r[e[n++]]+r[e[n++]]+r[e[n++]]+r[e[n++]]+r[e[n++]]+r[e[n++]]}for(var i=[],r=0;256>r;++r)i[r]=(r+256).toString(16).substr(1);t.exports=n},{}],49:[function(e,t){(function(e){var n,i=e.crypto||e.msCrypto;if(i&&i.getRandomValues){var r=new Uint8Array(16);n=function(){return i.getRandomValues(r),r}}if(!n){var o=new Array(16);n=function(){for(var e,t=0;16>t;t++)0===(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}t.exports=n}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],50:[function(e,t){function n(e,t,n){var o=t&&n||0;"string"==typeof e&&(t="binary"==e?new Array(16):null,e=null),e=e||{};var a=e.random||(e.rng||i)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var s=0;16>s;++s)t[o+s]=a[s];return t||r(a)}var i=e(49),r=e(48);t.exports=n},{48:48,49:49}]},{},[31]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

!function(e,t,o,r){"use strict";t.has(r,"dashboard")||(r.dashboard={}),r.dashboard.DashboardView=e.create({initialize:function(){r.data.dashboard_empty||(this.course_progress_fetcher=new r.dashboard.CourseProgressFetcher,this.unenrolling_manager=new r.dashboard.UnenrollingManager,r.goal_setter.init("dashboard")),o(".btn[title], h1 span[title]").tooltip()},scrollCloudsAndSun:function(){var e=o("html"),t=e.hasClass("night"),r=o(".clouds-header"),a=o(".sun"),n=t?126:64;o(window).scroll(function(){var e=void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop;r.css("top",.6*e+68+"px"),a.css("top",.4*e+n+"px")})}}),r.renderer.ready(function(){r.view=new r.dashboard.DashboardView,r.view.scrollCloudsAndSun()})}(Class,_,jQuery,MEMRISE),function e(t,o,r){function a(s,i){if(!o[s]){if(!t[s]){var l="function"==typeof require&&require;if(!i&&l)return l(s,!0);if(n)return n(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var d=o[s]={exports:{}};t[s][0].call(d.exports,function(e){var o=t[s][1][e];return a(o?o:e)},d,d.exports,e,t,o,r)}return o[s].exports}for(var n="function"==typeof require&&require,s=0;s<r.length;s++)a(r[s]);return a}({1:[function(e,t){"use strict";t.exports=function(e,t,o,r,a){function n(e){this.audio_mode=o.prop(e.audio_mode),this.video_mode=o.prop(e.video_mode),this.id=o.prop(e.id),this.name=o.prop(e.name),this.photo=o.prop(e.photo),this.percent_complete=o.prop(e.percent_complete||0),this.learned=o.prop(e.learned||0),this.num_things=o.prop(e.num_things),this.ignored=o.prop(e.ignored||0),this.category=o.prop(e.category),this.description=o.prop(e.description?e.description:""),this.url=o.prop(e.url),this.goal=o.prop(e.goal),this.difficult=o.prop(e.difficult||0),this.review=o.prop(Math.min(e.review||0,999)),this.learnUrl=o.prop(e.url+"garden/learn/"),this.reviewUrl=o.prop(e.url+"garden/classic_review/"),this.audioReviewUrl=o.prop(e.url+"garden/listening_skills/"),this.difficultUrl=o.prop(e.url+"garden/difficult_words/"),this.speedUrl=o.prop(e.url+"garden/speed_review/"),this.meetTheNatives=o.prop(e.url+"garden/meet_the_natives/"),this.leaderboardUrl=o.prop(e.url+"leaderboard"),this.proChats=o.prop(e.pro_chats||[]),this.grammarChats=o.prop(e.grammar_chats||[]),this.isGoalSet=function(){return this.goal()&&this.goal().goal>0},this.isGoalAchieved=function(){var e=this.goal();return e.points>=e.goal},this.isInProgress=function(){return this.percent_complete()<100}}function s(o,r){var a=e("html");t.modal.content({modalId:"modal-chat-selector",template:"chat-selector",styleVersion:2,backdrop:"static",seeThru:!1,removeOnHidden:!0,templateVars:{proChats:o.proChats(),grammarChats:o.grammarChats(),targetLanguage:o.category(),grammarVariant:r}},function(){a.addClass("no-scroll")},function(){a.removeClass("no-scroll")})}function i(t,o,r){var a=e(o);a.find(".see-all-plans").attr("href",p(r)),t.onclick=function(){a&&(a.modal("show"),"#mtn-upsell-modal"===o&&videojs("#mtn-video",{controlBar:!1}).ready(function(){this.play()}))}}function l(r){var a=r.vm.course();return o("span.ctrl-btn",[o("span.icon"),o("ul.tooltip",[o("li",[o("a.option-btn",{href:a.url()},[o("i.option-pin"),_t("Course details")])]),o("li",[o("a.option-btn",{onclick:function(o){o.preventDefault(),t.sharing.facebookShareClick(e(o.target))},href:"#","data-url":a.url(),"data-title":a.name(),"data-picture":a.photo(),"data-description":a.description(),"data-caption":_t("Memrise is a fun and easy way to learn and improve your memory!")},[o("i.option-share"),_t("Share with friends")])]),"teaching"===r.vm.currentFilter()?"":o("li",[o("span.option-btn",{onclick:function(){r.quitCourse()}},[o("i.option-delete"),_t("Quit course")])])])])}function u(e){var t=e.isInProgress(),r=t?["right"]:["right","half"];return o(".wrapper",[o(".course-progress",[o("div",{"class":r.join(" ")},[o("span",_t("__learned__ / __all__ words learned",{learned:e.learned(),all:e.num_things()-e.ignored()}))]),o(".progress-bar-container",[o(".progress-bar",{style:"width: "+e.percent_complete()+"%"})]),t?"":o(".left.half",[o("span.course-complete-text","Course Complete!")])])])}function d(e,t){var o=m(t,e),r=g(t,e),a=h(e),n=_(e),s=f(e),i=v(t,e),l=b(t,e),u=w(t,e);return[l,u,o,i,r,a,s,n]}function c(){var e=t.scb();return[e]}function p(e){return"/premium/?session_type="+e+"&source=mode_selector#features"}function m(e,t){var r=t.difficult(),a=["button"],n="",s="",l=[o("span.btn-img.img-star"),o("span.text",r)],u="a";e?r?(s=_t("Review your difficult words"),a.push("orange","img-and-text"),n=t.difficultUrl()):(s=_t("No difficult words to review"),u="span",a.push("disabled","img-and-text")):(s=_t("Learn more about My Difficult Words"),n="#",a.push("orange","img-and-text"));var d={title:s,href:n,"class":a.join(" "),"data-toggle":"tooltip","data-placement":"bottom"};return e||i(d,"#difficult-words-upsell-modal","difficult_words"),o(u,d,l)}function h(e){var t="";return e.learned()>0&&(t=o("a.button.only-img.speed-red",{href:e.speedUrl(),title:_t("Speed review"),"data-toggle":"tooltip","data-placement":"bottom"},[o("span.btn-img.img-clock")])),t}function g(e,t){if(!t.audio_mode()||0===t.learned())return"";var r=["button","only-img"],a="",n="";e?(r.push("purple"),n=t.audioReviewUrl(),a=_t("Practice your listening skills")):(n="#",r.push("purple"),a=_t("Learn more about audio review"));var s={href:n,title:a,"data-toggle":"tooltip","data-placement":"bottom","class":r.join(" ")};return e||i(s,"#listening-upsell-modal","listening_skills"),o("a",s,[o("span.btn-img.img-note")])}function f(e){var t=e.review()>0,r=e.reviewUrl(),a=t?_t("Review (__reviewNum__)",{reviewNum:e.review()}):_t("Review"),n="a.button"+(t?".blue":"");return o(n,{href:r,title:_t("Review words you've learned"),"data-toggle":"tooltip","data-placement":"bottom"},[o("span.text",a)])}function _(e){var t="";return e.isInProgress()&&(t=o("a.button.green",{href:e.learnUrl(),title:_t("Learn new words"),"data-toggle":"tooltip","data-placement":"bottom"},[o("span.text",_t("Learn"))])),t}function v(e,t){if(!t.video_mode()||0===t.learned()||!t.isInProgress())return"";var r=["button","only-img","teal"],a={href:e?t.meetTheNatives():"#",title:_t("mtn_button_altText"),"data-toggle":"tooltip","data-placement":"bottom","class":r.join(" ")};return e||i(a,"#mtn-upsell-modal","meet_the_natives"),o("a",a,[o("span.btn-img.img-person")])}function b(e,t){var r="";if(t.proChats().length>0){var a=["button","only-img","yellow","btn-left"],r={href:"#",title:_t("chatbot_button_hover_description"),"data-toggle":"tooltip","data-placement":"bottom","class":a.join(" ")};e?r.onclick=function(){s(t,!1)}:i(r,"#chat-upsell-modal","pro_chat")}return o("a",r,[o("span.btn-img.img-balloon")])}function w(e,t){var r="";if(t.grammarChats().length>0){var a=["button","only-img","purple-chat","btn-left"],r={href:"#",title:_t("chat_card_grammabot_description"),"data-toggle":"tooltip","data-placement":"bottom","class":a.join(" ")};e?r.onclick=function(){s(t,!0)}:i(r,"#grammarbot-upsell-modal","grammar")}return o("a",r,[o("span.btn-img.img-feather")])}function y(e){function r(){e.hideGoal(!e.hideGoal())}var a=e.course(),n=a.goal(),s=e.hideGoal()?".inactive":".active";return a.isGoalSet()&&!a.isGoalAchieved()?o("span.simple-btn.goal-setter-btn"+s,{title:_t("Goal setter lets you set learning targets")},[o("span.onoff",{onclick:r},[_t("Today: "),o("span.pts",[o("span.orange",[n.points]),_t(" / __goal__ pts",{goal:n.goal})])])]):a.isGoalSet()&&a.isGoalAchieved()?o("span.simple-btn.goal-setter-btn.done"+s,{title:_t("Goal setter lets you set learning targets")},[o("span.onoff",{onclick:r},_t("Goal complete!"))]):o("span.simple-btn.goal-setter-btn.inactive",{onclick:function(){t.goal_setter.goals[a.id()].showPopup()},title:_t("Goal setter lets you set learning targets")},[o("span.onoff",_t("Set a daily goal"))])}function k(e){return 1500===e?5:6e3===e?15:45}function C(e){return 1500===e?".first":6e3===e?".second":".third"}function x(e,t,n){for(var s=r.range(0,7).concat(r.range(0,7)).map(function(e){return a.getWeekdayName(e,1)}),i=[],l=[],u=Math.min(n?t:t+1,7)-1,d=(e+7-u)%7;u>=0;){var c=s[d];0===u?n?i.push(o("span.streak-bubble.complete",[o("span",c)])):l.push(o("span.streak-bubble.current",[o("span",c)])):i.push(o("span.streak-bubble.complete",[o("span",c)])),d++,u--}for(var p=n?7-i.length:6-i.length,m=0;p>m;m++)l.push(o("span.streak-bubble.incomplete",[o("span",s[d+m])]));return[o("span.complete",i),l]}function S(e,r,a){var n=Math.min(parseInt(a.points/a.goal*100),100);if(!(r>=0&&7>r))throw"expecting day to be a value between 0 and 6";return o(".goal-setter",[o(".streak-edit",[o(".level"+C(a.goal)),o(".duration",_t("__duration__ mins a day",{duration:k(a.goal)})),o("span.simple-btn.edit-goal-btn",{onclick:function(){t.goal_setter.goals[e].showPopup()},title:_t("Adjust your goal")},[o("span",_t("Edit goal"))])]),o(".streak-row",[o(".streak",[o(".streak-bubbles",x(r,a.streak,100===n))]),o(".streak-fake-btn",[o(".num",a.streak),o(".text",_t("streak"))])],o(".goal-setter-progress",[o(".bar",{style:"width: "+n+"%"})]))])}function T(e){o.post({url:"/ajax/courses/quit/",data:{course_id:e}}).then(function(){return t.dashboard.cardsComponent.removeCard(e)})}function M(e){var r={vm:{course:o.prop(e.course),currentFilter:o.prop(e.currentFilter),hideGoal:o.prop(!e.course.isGoalSet())},controller:function(){return{vm:r.vm,quitCourse:function(){var e=this.vm.course().id();t.modal.yes_no(_t("Quit this course"),t.trans.quitCourse,function(){T(e)})}}},view:function(e){var r,a=e.vm.course(),n=a.isInProgress(),s=n?["detail"]:["detail","wide"];return r=t.data.FEATURE_ENABLE_SCB?c(a,t.user.is_premium):d(a,t.user.is_premium),o(".course-card-container.js-course-card-container",{id:"course-"+a.id(),key:a.id()},[o(".course-progress-box",{},[o(".card-top",[o(".card-image-col",[o('a[href="'+a.url()+'"]',[o(".img-crop",[o('img.course-photo[src="'+a.photo()+'"]'),o('img.category-photo[src="'+a.category().photo+'"]')])])]),o(".card-main-container",[o(".top-main",[o(".wrapper",[o("div",{"class":s.join(" ")},[o('p.title[title="'+a.name()+'"]',[o('a[href="'+a.url()+'"]',a.name())])]),o(".pull-right",[n?y(e.vm):"",o('a[href="'+a.leaderboardUrl()+'"]',[o("span.simple-btn.leaderboard-btn",[o("span.leaderboard-icon")])]),l(e)]),u(a),a.isGoalSet()&&n&&!e.vm.hideGoal()?S(a.id(),t.data.day_of_the_week,a.goal()):""])])])]),a.num_things()-a.ignored()>0?o(".card-bottom",[o(".course-actions",r)]):""])])}};return r}return{widget:M,model:n}}},{}],2:[function(e,t){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}var r=e(5),a=o(r);t.exports=function(t,o,r,n,s,i){function l(e,t){var o=t.options[t.selectedIndex],a=o.getAttribute("data-choice"),n=o.value,s=e.vm.currentFilter(),i=e.vm.currentCatId();(a!==s||n!==i)&&(t.disabled=!0,a===y&&(n=parseInt(n)),e.vm.isLoading(!0),e.resetCourses(),r.redraw(),v.fetchCourses(a,a===y?parseInt(n):null).then(function(){var o=h.getSavedFilter();o.courses_filter=a,e.vm.currentFilter(a),a===y&&(o.category_id=n,e.vm.currentCatId(n)),h.savedFilter(o),e.vm.widgets({}),e.vm.isLoading(!1),t.disabled=!1}))}function u(e){var t,a,i,u,d=e.vm.currentFilter(),c=e.vm.currentCatId(),p=e.vm.categories(),m=e.vm.isReviewNumsLoaded(c);switch(d){case x:t=S[C];break;case y:var h=n.find(p,function(e){return e.id===c});u=m?o.data.cat_review_nums[c]:e.vm.toReviewTotal(),void 0===h&&(localStorage.removeItem(g),window.location.reload()),t=h.name,u>0&&(a=s("/garden/review/%s/",h.slug),i=" "+_t("Review (__reviewNum__)",{reviewNum:u}));break;default:t=S[d]}var f=r(".courses-filter-container",[r(".left",[r(".title-container",[r("h1.title",t)])]),r(".right",[d===k?r("a.button.green.capped",{href:"/course/create/"},_t("Create course")):"",a?r("a.button.blue",{href:a},i):"",r(".select-container",[r("select.courses-filter",{name:"courses-filter",title:_t("Filter your page content"),onchange:function(t){var o=t.target;l(e,o)}},n.map(S,function(e,t){var a;if(t===x){var i={"data-choice":C,value:C,disabled:"disabled"};d===t&&(i.selected=!0),a=r("option",i,e)}else if(t===y)a=r("optgroup",{label:e},n.map(p,function(e){var t,a=e.id,n={"data-choice":y,value:a},i=m?o.data.cat_review_nums[a]:0;return d===y&&c===a?(n.selected=!0,t=e.name):t=i>0?s("%s (%d)",e.name,i):e.name,r("option",n,t)}));else{var i={"data-choice":t,value:t};d===t&&(i.selected=!0),a=r("option",i,e)}return a}))])])]);return f}function d(e){var t=e.vm.coursesOrder().length>0?1:2,o=n.map(n.range(0,t),function(){return r(".loading-item",[r(".loading-animation",[r(".background-masker.title-separator"),r(".background-masker.image-right"),r(".background-masker.image-bottom"),r(".background-masker.stats-top"),r(".background-masker.stats-left"),r(".background-masker.progress-top"),r(".background-masker.progress-bottom")])])});return r(".loading-wrapper",o)}function c(e){var t=e.vm,r=t.courses(),a=t.currentFilter(),s=t.widgets();return n.map(t.coursesOrder(),function(e){var t=r[e];return o.goal_setter.goals[e]=new o.Goal(e,t.photo(),t.name(),t.goal()||{},!1,!1),void 0===s[e]&&(s[e]=b({course:t,currentFilter:a})),s[e]})}function p(e){var t=[],o={};return e.forEach(function(e){o[e.id]=new w(e),t.push(e.id)}),[o,t]}function m(e,o){o||t('*[data-toggle="tooltip"]').tooltip({container:"body"})}function h(e){var a=parseInt(e.category_id),s=e.courses_filter,i={vm:{isLoading:r.prop(!0),isReviewNumsLoaded:function(e){return e&&n.has(o.data.cat_review_nums,e)},courses:r.prop({}),toReviewTotal:r.prop(0),coursesOrder:r.prop([]),widgets:r.prop({}),currentFilter:r.prop(s),categories:r.prop(e.learning_categories),currentCatId:r.prop(isNaN(a)?null:a),hasMoreCourses:r.prop(!0)},controller:function(){var e={$window:t(window),vm:i.vm,setGoal:function(e,t){var o=this.vm.courses()[e];o.goal(t),this.vm.widgets()[e].vm.hideGoal(!o.isGoalSet())},removeCard:function(e){delete this.vm.courses()[e],this.vm.coursesOrder(n.without(this.vm.coursesOrder(),e)),0===n.size(this.vm.courses())&&(this.vm.currentFilter()===y&&localStorage.removeItem(g),window.location.reload())},setCourses:function(e,t){var o=p(e);this.vm.courses(n.assign(this.vm.courses(),o[0])),this.vm.coursesOrder(this.vm.coursesOrder().concat(o[1])),this.vm.isLoading(!1),this.vm.hasMoreCourses(t)},resetCourses:function(){this.vm.courses({}),this.vm.coursesOrder([]),this.vm.hasMoreCourses(!0)},setToReviewTotal:function(e){this.vm.toReviewTotal(e)},loadMoreCourses:function(){r.startComputation(),this.vm.isLoading(!0),r.endComputation();var e=this.vm.currentFilter(),t=n.size(this.vm.courses()),o=t>=f?2*f:f;v.fetchCourses(e,e===y?this.vm.currentCatId():null,t,o)},onScroll:function(){var e=this.vm.coursesOrder().length;if(!(1>e||!this.vm.hasMoreCourses()||this.vm.isLoading())){var o=t("#course-"+this.vm.coursesOrder()[e-1]),r=o.offset();if(r){var a=this.$window.scrollTop()+this.$window.height();r.top<a&&this.loadMoreCourses()}}}};return e.$window.on("scroll",n.throttle(e.onScroll.bind(e),500)),e},view:function(e){var t=c(e),o=u(e),a=r("div",{config:m},e.vm.isLoading()?t.concat(d(e)):t);return[o,a]}};return i}var g="dashboard_filter",f=4,_=e(1)(t,o,r,n,i),v=e(4)(t,o,r,n),b=_.widget,w=_.model,y="learning",k="teaching",C="most_recent",x="initial",S={initial:_t("Filter Results"),with_goal:_t("With Goal Set"),most_recent:_t("Recently Learned"),teaching:_t("Teaching"),learning:_t("By Category")};return h.getSavedFilter=function(){var e=JSON.parse(localStorage.getItem(g));return(null===e||void 0===e.courses_filter)&&(e=1===o.data.learning_categories.length?{courses_filter:"learning",category_id:o.data.learning_categories[0].id}:{courses_filter:"initial"}),e.learning_categories=o.data.learning_categories,h.savedFilter(e),e},h.savedFilter=function(e){localStorage.setItem(g,a.default(e))},h}},{1:1,4:4,5:5}],3:[function(e){"use strict";!function(t,o,r,a,n,s,i){o.has(a,"dashboard")||(a.dashboard={}),a.dashboard.CourseProgressFetcher=function(){a.data.cat_review_nums={};var t=e(2)(r,a,n,o,s,i),l=e(4)(r,a,n,o),u=t.getSavedFilter(),d=r(".js-course-cards-component")[0],c=t(u);a.dashboard.cardsComponent=n.mount(d,c),l.fetchCourses(u.courses_filter,u.category_id).then(n.endComputation)}}(Class,_,jQuery,MEMRISE,m,sprintf,datetime)},{2:2,4:4}],4:[function(e,t){"use strict";t.exports=function(e,t,o,r){return{fetchCourses:function(e,a){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:4;"initial"===e&&(e="most_recent");var i={courses_filter:e,offset:n,limit:s,get_review_count:"learning"===e&&!r.has(t.data.cat_review_nums,a)&&null!==a};return a&&(i.category_id=a),o.request({url:"/ajax/courses/dashboard/",data:i}).then(function(e){a&&i.get_review_count&&(t.data.cat_review_nums[a]=e.to_review_total),t.dashboard.cardsComponent.setToReviewTotal(e.to_review_total),t.dashboard.cardsComponent.setCourses(e.courses,e.has_more_courses)})}}}},{}],5:[function(e,t){t.exports={"default":e(6),__esModule:!0}},{6:6}],6:[function(e,t){var o=e(7),r=o.JSON||(o.JSON={stringify:JSON.stringify});t.exports=function(){return r.stringify.apply(r,arguments)}},{7:7}],7:[function(e,t){var o=t.exports={version:"2.5.0"};"number"==typeof __e&&(__e=o)},{}]},{},[3]),function t(e,o,r){function a(s,i){if(!o[s]){if(!e[s]){var l="function"==typeof require&&require;if(!i&&l)return l(s,!0);if(n)return n(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var d=o[s]={exports:{}};e[s][0].call(d.exports,function(t){var o=e[s][1][t];return a(o?o:t)},d,d.exports,t,e,o,r)}return o[s].exports}for(var n="function"==typeof require&&require,s=0;s<r.length;s++)a(r[s]);return a}({1:[function(e,t){t.exports=function(e){var t=function(e){return{view:function(e){var t=moment.duration(e.timeTillMidnight(),"seconds");return m(".sidebar-box.goal-countdown",[m(".countdown-header",[m("span.header-img-container",m("span.header-img")),m("span.header-text",_t("Streak Clock"))]),m(".countdown-body",[m("span.countdown-text",_t("Time left to complete your daily goals")),m("span.countdown-duration",[m("span.time-block",[m("span.time-num",t.get("hours")),m("span.time-text",_t("hours"))]),m("span.time-block",[m("span.time-num",t.get("minutes")),m("span.time-text",_t("mins"))])])]),m(".sidebar-main-btn",m('a.simple[href="/settings/"]',_t("Change timezone")))])},controller:function(){this.timeTillMidnight=m.prop(e)}}};e.renderer.ready(function(){var o=document.getElementById("m-sidebar-goal-countdown");if(null!==o)var r=m.mount(o,new t(e.data.time_till_midnight)),a=setInterval(function(){var e=r.timeTillMidnight();0>=e?clearInterval(a):r.timeTillMidnight(e-60),m.redraw()},6e4)})}},{}],2:[function(e,t){t.exports=function(e,t,o,r){var a=r("#m-sidebar-leaderboard"),n=t.newLeaderboard({endPoint:"/ajax/leaderboard/mempals/",fullBoardUrl:"/home/leaderboard/",howMany:5});t.renderer.ready(function(){a.length>0&&o.mount(a[0],n)})}},{}],3:[function(e,t){t.exports=function(e){var t=e(".sidebar-profile .content-stats"),o=e(".js-num",t),r=e(".js-placeholder",t),a=o.css("font-size").replace("px","");e.each(o,function(){for(var t=e(this);t.width()>t.parent().width();)a--,o.css("font-size",a+"px")}),r.hide(),o.show()}},{}],4:[function(e,t){t.exports=function(e,t,o,r){"use strict";function a(){var e="#",t="premium-upsell-btn",r=_t("dashboard_module_stats_button"),a={href:e,"class":t},n=$("#stats-upsell-modal");a.onclick=function(){n&&n.modal("show")};var s=o(".sidebar-main-btn.premium-link",o("a",a,r));return[o(".sidebar-box.sidebar-premium",o(".premium-header",[o("span.premium-image"),o("span.premium-text",_t("dashboard_module_stats_header"))]),o("span.premium-stats-image"),s)]}function n(t){if(void 0!==t){for(var a=u.analytics_url(),n=_t("More"),d="simple",c=7,p=30,m=[],h=[],g=1,f=!0,_=!0,v=new Date,b=l(v),w=i(t.streak_data),y=0;p>y;y++){var k=void 0===t.streak_data[b]?0:t.streak_data[b],C=v.getDay(),x=r.getWeekdayName(C),S=v.getDate(),T=r.getMonthName(v.getMonth()),M=_t("__events__ events on __day__ __num__, __month__",{events:k,day:x,num:S,month:T}),I="";k>w[0]?I="high":k>w[1]?I="average":k>0&&(I="low");var O=o("span.cell",{"data-date":b,"data-events":k,title:M,"class":I});h.unshift({dayOfWeek:C,content:O}),v.setDate(S-1),b=l(v)}var F=[],j=[];for(f&&7===c&&m.push(s(g));e.size(h);){var E=h.shift();if(E.dayOfWeek!==g)F.push(E.content);else{for(;e.size(F)<c;){var N=o("span.cell.empty");F.unshift(N)}j=[o(".cellWrapper",F)],m.push(j),F=[E.content]}}return m.push([o(".cellWrapper",F)]),[o(".sidebar-box.sidebar-premium",o(".premium-header",[o("span.premium-image"),o("span.premium-text",_t("Pro"))]),o(".premium-content",[o(".text",_t("This month's learning graph")),o("a.monthlyStreak",{href:a,"class":_?"horizontal":""},m),o("p.text",_t("Best streak")),o("p.emphasized",_t("__streak__ days",{streak:t.longest_streak})),o("p.text",_t("Last 7 days")),o("p.emphasized",t.time_spent)]),o(".sidebar-main-btn.premium-link",o("a",{href:a,"class":d},n)))]}}function s(e){for(var t=[],a=0;7>a;a++){var n=e+a,s=n>6?0:n,i=o("span.cell.dayInitial",r.getWeekdayName(s,!0));t.push(i)}return[o(".cellWrapper",t)]}function i(t){if(!e.size(t))return[0,0];var o=e.values(t),r=e.max(o),a=Math.round(.75*r),n=Math.round(.5*r);return[a,n]}function l(t){var o=t.getFullYear().toString(),r=(t.getMonth()+1).toString(),a=t.getDate().toString();return e.size(r)<2&&(r="0"+r),e.size(a)<2&&(a="0"+a),[o+"-"+r+"-"+a]}var u={};u.analytics_url=o.prop("/home/learning-statistics/"),u.premium_url=o.prop("/premium/?source=dashboard"),u.view=function(e){var o=e.stats();return t.user.is_premium?n(o):a(o)},u.controller=function(){return{stats:o.request({method:"GET",url:"/ajax/metrics/dashboard_sidebar_stats/"})}},t.renderer.ready(function(){var e=document.getElementById("m-sidebar-premium");null!==e&&o.mount(e,u)})}},{}],5:[function(e){!function(t,o,r,a){e(2)(t,o,r,a,Handlebars),e(4)(t,o,r,datetime),e(3)(a),e(1)(o),e(6)(a,"dashboard"),a(document).ready(function(){a('*[data-toggle="tooltip"]').tooltip()})}(_,MEMRISE,m,jQuery)},{1:1,2:2,3:3,4:4,6:6}],6:[function(e,t){t.exports=function(e,t){var o=e("#promotion-modal");o&&(o.on("show.bs.modal",function(){var e=o.data("tracking-name");analytics.track("upsell_viewed",{upsell_name:e,source:t})}),o.modal("show"))}},{}]},{},[5]),function(e,t,o,r){"use strict";t.has(r,"dashboard")||(r.dashboard={}),r.dashboard.UnenrollingManager=e.create({initialize:function(){this.start_observing()},start_observing:function(){this.on_unenrolled=t.bind(this.on_unenrolled,this),t(r.courses).on("unenrolled",this.on_unenrolled)},on_unenrolled:function(e){var t=o('[data-course-id="'+e+'"]');t.find("[title]").tooltip("destroy"),t.slideUp(function(){o(this).remove()})}})}(Class,_,jQuery,MEMRISE),function(e,t,o){"use strict";var r=[1500,6e3,2e4];t.Goal=function(n,s,i,l,u,d){var c=this;this.course_id=n,this.img_url=s,this.course_name=i,this.header_text=d,this.data=l,this.course_complete=u,this.active=!o.isEmpty(l),this.showPopup=function(){t.modal.content({modalId:"goal-setter-popup",showHeader:!1,showFooter:!1,backdrop:!0,keyboard:!0,template:"goal-setter",seeThru:!1,removeOnHidden:!0,templateVars:{course_id:c.course_id,img_url:c.img_url,course_name:c.course_name,header_text:c.header_text?c.header_text:_t("Set a daily goal - hit your goal every day to win bonuses!")}},function(){switch(c.data.goal){case r[0]:e(".first").addClass("active");break;case r[1]:e(".second").addClass("active");break;case r[2]:e(".third").addClass("active")}e(".goal-choice").on("click",function(){var t=e(this),o=t.dataAttr("level");e(".goal-choice").removeClass("active"),e(".dot").removeClass("active"),t.addClass("active"),e(".dot",t).addClass("active"),c.data.goal=r[o],c.save(),t.find(".main-text").first().text("Saved!").css("color","rgb(255, 117, 107)")}),o.has(t,"garden")&&(t.garden.session_params.shown_goal_setter=!0)},this.hiddenCallback)},this.hidePopup=function(r){"dashboard"===a.context&&t.dashboard.cardsComponent.setGoal(this.course_id,this.data),e("#goal-setter-popup").fadeOut(400,function(){e(this).remove(),e(".modal-backdrop").remove(),o.isFunction(r)&&r()})},this.off=function(){var t=this;m.startComputation(),e.ajax({url:"/ajax/course/daily-goal/",type:"POST",data:{course_id:t.course_id},success:function(){t.active=!1,t.data.points=0,t.data.goal=0,t.data.streak=0,t.hidePopup("during-session"===a.context?t.redirectHome:t.render),m.endComputation()}})},this.save=function(){var t=this,o={course_id:t.course_id,daily_goal:t.data.goal};m.startComputation(),e.ajax({url:"/ajax/course/daily-goal/",type:"POST",data:o,success:function(e){"undefined"==typeof t.data.points&&(t.data.points=0),"undefined"==typeof t.data.goal&&(t.data.goal=0),t.active=t.data.goal>0,t.data.goal_achieved=e.goal_achieved,t.data.streak=e.streak,t.hidePopup("during-session"===a.context?t.redirectHome:"end-session"===a.context?function(){t.render(),a.animate_bar(t.course_id)}:t.render),m.endComputation()}})},this.redirectHome=function(){window.onbeforeunload=null,window.location.href="/home"},this.render=function(){if("end-session"===a.context){var o=e(".course_box .bottom"),r=e(".upper",o),n=e(".progress",o),s=e(".text",r),i=e(".course_points",r),l=e(".edit",r),d=e(".bar",n);if(c.active){if(o.addClass("goal-setter-shadow"),0===t.garden.session_data.initial_session_points&&(r.add(n).add(d).show(),t.goal_setter.animate_bar(t.garden.session_params.course_id)),u){var p=_t("Course completed!");s.text(p),r.addClass("center"),i.add(l).remove()}else if(c.data.goal_achieved){var p=_t("Today's goal complete!");c.data.streak>0&&(p+="<span class='streak_info'>",p+=plural(_t("Current streak: %(count)d day"),_t("Current streak: %(count)d days"),c.data.streak),p+="</span>"),s.html(p),r.addClass("done"),i.add(l).remove()}else{var m=e(".pts",o),h=e(".goal",o),p=_t("Today's goal:");s.text(p),m.text(c.data.points),h.text(c.data.goal)}(u||c.data.goal_achieved)&&t.garden.session_data.session.goal_points>=c.data.points&&d.addClass("notrans")}else r.add(n).hide()}}};var a=t.goal_setter={};e.extend(!0,t.goal_setter,{goals:{},init:function(e){a.context=e,a.registerEvents()},initFireworks:function(){t.fireworks.init();var o="<div class='fireworks-close-btn js-close-fireworks'>x</div>";e("body").append(o),e(".js-close-fireworks").fadeIn(2e3).on("click",function(){t.fireworks.closeFireworks()})},animate_bar:function(r){if("undefined"!=typeof t.garden.session_data.session.goal_points){var a=this.goals[r].data,n=this.goals[r].course_complete,s=e(".course_box .bottom"),i=e(".bar",s),l=e(".sparkle",s);if((n||a.goal_achieved)&&t.garden.session_data.session.goal_points<a.goal)i.width("100%"),setTimeout(function(){o.include([2,4,5,10],a.streak)&&!t.user.is_premium?(t.shownGoalUpsell=!0,t.goal_setter.initFireworks(),setTimeout(function(){t.goal_setter.showPromoPopup(a.streak)},3e3)):(l.show(),s.addClass("bounce"))},2e3);else if(a.points>0&&a.goal>0){var u=a.points/a.goal*100,d=(u>100?100:u)+"%";i.width(d)}else i.hide()}},showPromoPopup:function(r){var a=o.include([2,4,5],r)?20:50,n=t.CONSTANTS.DISCOUNT_CODES[a],s=t.garden.getSessionType(),i="?offer="+n+"&upsell_name=streak_upgrade&source=eos&session_type="+s;t.modal.content({modalId:"end-session-promo-popup",showHeader:!1,showFooter:!1,backdrop:!1,keyboard:!0,template:"show-streak-promo",seeThru:!1,removeOnHidden:!0,templateVars:{url:"/premium/pay/annual/"+i,mainText:_t("Congratulations!"),percentage:a,subText:_t("You've hit a __numDay__ day goal streak!",{numDay:r})},shadow:!1,fadeTime:"slow"},function(){var o=e("#end-session-promo-popup");e(".skip",o).on("click",function(){t.fireworks.closeFireworks()}),e(".btn-promo",o).on("click",function(){})})},hideModal:function(){var t=e("#end-session-promo-popup");t.fadeOut(400,function(){t.remove()})},registerEvents:function(){var o=e(document);if("dashboard"===a.context)o.on("click",".turn-off",function(){var t=e(this).data("target");a.goals[t].off()});else if("end-session"===a.context){var r=t.garden.session_params.course_id;o.on("click",".edit",function(){a.goals[r].showPopup()}),o.on("click",".turn-off",function(){a.goals[r].off()}),0===t.garden.session_data.initial_session_points&&e(".end_of_session .next_btn").on("click",function(){a.goals[r].showPopup()})}else if("during-session"===a.context){var r=t.garden.session_params.course_id;t.garden.session_params.shown_goal_setter=!1,0===t.garden.session_data.initial_session_points&&(o.on("click",".session-exit",function(){return t.garden.session_params.shown_goal_setter?void 0:(a.goals[r].hiddenCallback=function(){window.location.href="/home"},a.goals[r].showPopup(),!1)}),o.on("click",".turn-off",function(){a.goals[r].off()}))}}})}(jQuery,MEMRISE,_);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
